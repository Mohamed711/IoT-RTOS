
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005ae  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000030f  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ad  00000000  00000000  00000c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000010c  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028f  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003ad  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_2>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_19>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e1       	ldi	r30, 0x18	; 24
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 32       	cpi	r26, 0x2A	; 42
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e2       	ldi	r26, 0x2A	; 42
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	aa 32       	cpi	r26, 0x2A	; 42
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  b2:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	81 f0       	breq	.+32     	; 0xde <GPIO_InitPortDirection+0x24>
  be:	28 f0       	brcs	.+10     	; 0xca <GPIO_InitPortDirection+0x10>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	b9 f0       	breq	.+46     	; 0xf2 <GPIO_InitPortDirection+0x38>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	f9 f0       	breq	.+62     	; 0x106 <GPIO_InitPortDirection+0x4c>
  c8:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  ca:	81 b1       	in	r24, 0x01	; 1
  cc:	94 2f       	mov	r25, r20
  ce:	90 95       	com	r25
  d0:	89 23       	and	r24, r25
  d2:	81 b9       	out	0x01, r24	; 1
  d4:	81 b1       	in	r24, 0x01	; 1
  d6:	46 23       	and	r20, r22
  d8:	48 2b       	or	r20, r24
  da:	41 b9       	out	0x01, r20	; 1
		}
		break;
  dc:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	94 2f       	mov	r25, r20
  e2:	90 95       	com	r25
  e4:	89 23       	and	r24, r25
  e6:	84 b9       	out	0x04, r24	; 4
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	46 23       	and	r20, r22
  ec:	48 2b       	or	r20, r24
  ee:	44 b9       	out	0x04, r20	; 4
		}
		break;
  f0:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
  f2:	87 b1       	in	r24, 0x07	; 7
  f4:	94 2f       	mov	r25, r20
  f6:	90 95       	com	r25
  f8:	89 23       	and	r24, r25
  fa:	87 b9       	out	0x07, r24	; 7
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	46 23       	and	r20, r22
 100:	48 2b       	or	r20, r24
 102:	47 b9       	out	0x07, r20	; 7
		}
		break;
 104:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	94 2f       	mov	r25, r20
 10a:	90 95       	com	r25
 10c:	89 23       	and	r24, r25
 10e:	8a b9       	out	0x0a, r24	; 10
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	46 23       	and	r20, r22
 114:	48 2b       	or	r20, r24
 116:	4a b9       	out	0x0a, r20	; 10
 118:	08 95       	ret

0000011a <SPI_Init>:
	#if (Master_Or_Slave == SPI_MASTER_EN)
		GPIO_InitPortDirection(PB,0xB0,0xF0);// MOSI,MISO,SCK,SS Port direction
		GPIO_InitPortDirection(PA,0xFF,0xFF);	//for displaying op
	#else
		/* Set MISO output, all others input */
		GPIO_InitPortDirection(PB,0x40,0xF0); //only MISO configured as op , others conf as ip
 11a:	40 ef       	ldi	r20, 0xF0	; 240
 11c:	60 e4       	ldi	r22, 0x40	; 64
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 5d 00 	call	0xba	; 0xba <GPIO_InitPortDirection>
		GPIO_InitPortDirection(PA,0xFF,0xFF);  //for displaying op
 124:	4f ef       	ldi	r20, 0xFF	; 255
 126:	6f ef       	ldi	r22, 0xFF	; 255
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 5d 00 	call	0xba	; 0xba <GPIO_InitPortDirection>
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
	{
		if(clk[u8LoopCount].u32TempFreq < SPI_InitConfig.u32MaxFreq)
 12e:	40 91 23 01 	lds	r20, 0x0123
 132:	50 91 24 01 	lds	r21, 0x0124
 136:	60 91 25 01 	lds	r22, 0x0125
 13a:	70 91 26 01 	lds	r23, 0x0126
 13e:	80 91 00 01 	lds	r24, 0x0100
 142:	90 91 01 01 	lds	r25, 0x0101
 146:	a0 91 02 01 	lds	r26, 0x0102
 14a:	b0 91 03 01 	lds	r27, 0x0103
 14e:	84 17       	cp	r24, r20
 150:	95 07       	cpc	r25, r21
 152:	a6 07       	cpc	r26, r22
 154:	b7 07       	cpc	r27, r23
 156:	88 f0       	brcs	.+34     	; 0x17a <SPI_Init+0x60>
 158:	e5 e0       	ldi	r30, 0x05	; 5
 15a:	f1 e0       	ldi	r31, 0x01	; 1
		GPIO_InitPortDirection(PA,0xFF,0xFF);  //for displaying op
			
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 15c:	21 e0       	ldi	r18, 0x01	; 1
	{
		if(clk[u8LoopCount].u32TempFreq < SPI_InitConfig.u32MaxFreq)
 15e:	80 81       	ld	r24, Z
 160:	91 81       	ldd	r25, Z+1	; 0x01
 162:	a2 81       	ldd	r26, Z+2	; 0x02
 164:	b3 81       	ldd	r27, Z+3	; 0x03
 166:	84 17       	cp	r24, r20
 168:	95 07       	cpc	r25, r21
 16a:	a6 07       	cpc	r26, r22
 16c:	b7 07       	cpc	r27, r23
 16e:	30 f0       	brcs	.+12     	; 0x17c <SPI_Init+0x62>
		GPIO_InitPortDirection(PA,0xFF,0xFF);  //for displaying op
			
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	35 96       	adiw	r30, 0x05	; 5
 174:	27 30       	cpi	r18, 0x07	; 7
 176:	99 f7       	brne	.-26     	; 0x15e <SPI_Init+0x44>
 178:	01 c0       	rjmp	.+2      	; 0x17c <SPI_Init+0x62>
 17a:	20 e0       	ldi	r18, 0x00	; 0
		{
			break;
		}
	}
	
	SPCR_REG = 0X00;
 17c:	1d b8       	out	0x0d, r1	; 13
	SPCR_REG |=  SPI_EN | SPI_InitConfig.u8DataOrder |Master_Or_Slave| SPI_InitConfig.u8Mode|(clk[u8LoopCount].u8RegVal & 0x03);
 17e:	3d b1       	in	r19, 0x0d	; 13
 180:	82 2f       	mov	r24, r18
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	20 91 28 01 	lds	r18, 0x0128
 188:	32 2b       	or	r19, r18
 18a:	30 64       	ori	r19, 0x40	; 64
 18c:	20 91 27 01 	lds	r18, 0x0127
 190:	32 2b       	or	r19, r18
 192:	fc 01       	movw	r30, r24
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	8e 0f       	add	r24, r30
 19e:	9f 1f       	adc	r25, r31
 1a0:	fc 01       	movw	r30, r24
 1a2:	e0 50       	subi	r30, 0x00	; 0
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	84 81       	ldd	r24, Z+4	; 0x04
 1a8:	28 2f       	mov	r18, r24
 1aa:	23 70       	andi	r18, 0x03	; 3
 1ac:	93 2f       	mov	r25, r19
 1ae:	92 2b       	or	r25, r18
 1b0:	9d b9       	out	0x0d, r25	; 13
	SPSR_REG = 0x00;
 1b2:	1e b8       	out	0x0e, r1	; 14
	SPSR_REG |= (clk[u8LoopCount].u8RegVal >> 2);
 1b4:	9e b1       	in	r25, 0x0e	; 14
 1b6:	86 95       	lsr	r24
 1b8:	86 95       	lsr	r24
 1ba:	89 2b       	or	r24, r25
 1bc:	8e b9       	out	0x0e, r24	; 14
		GICR_REG |=(INT_1); //enable external interrupt of INT1
		MCUCR_REG &=~(ISC_10); // enable interrupt on negative edge of INT1
		MCUCR_REG |= (ISC_11) ;
		//SPCR_REG &= ~(ENABLE_INTERRUPT_OR_NOT); //to disable spi interrupt
		#else 
		sei();
 1be:	78 94       	sei
		GPIO_InitPortDirection(PC,0x01,0x01);	//responsible for interrupt of INT1
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 5d 00 	call	0xba	; 0xba <GPIO_InitPortDirection>
		//DDRC=0x01;
		SPCR_REG |=  ENABLE_INTERRUPT_OR_NOT ;
 1ca:	6f 9a       	sbi	0x0d, 7	; 13
 1cc:	08 95       	ret

000001ce <__vector_2>:
	while(!(SPSR_REG & SPIF));
}


ISR (INT1_vect)  //receive of Master with interrupt
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	8f 93       	push	r24
	SPDR_REG = 0xFF;//garbage
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR_REG & SPIF));
 1de:	77 9b       	sbis	0x0e, 7	; 14
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <__vector_2+0x10>
	PORTA =SPDR_REG;
 1e2:	8f b1       	in	r24, 0x0f	; 15
 1e4:	82 b9       	out	0x02, r24	; 2
}
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_19>:
	SPCR_REG |= ENABLE_INTERRUPT_OR_NOT;
}


ISR (SPI_STC_vect)//receive for slave 
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
	PORTA =SPDR_REG;
 1fe:	8f b1       	in	r24, 0x0f	; 15
 200:	82 b9       	out	0x02, r24	; 2
}
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <main>:
 */ 
#include "SPI_Lcfg.h"

void main()
{
	SPI_Init();
 20e:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_Init>
 212:	ff cf       	rjmp	.-2      	; 0x212 <main+0x4>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>

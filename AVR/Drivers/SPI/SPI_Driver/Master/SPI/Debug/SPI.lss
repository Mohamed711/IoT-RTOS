
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000218  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000619  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000371  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d9  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000010c  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000289  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000039f  00000000  00000000  00001399  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  8a:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	81 f0       	breq	.+32     	; 0xb6 <GPIO_InitPortDirection+0x24>
  96:	28 f0       	brcs	.+10     	; 0xa2 <GPIO_InitPortDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b9 f0       	breq	.+46     	; 0xca <GPIO_InitPortDirection+0x38>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	f9 f0       	breq	.+62     	; 0xde <GPIO_InitPortDirection+0x4c>
  a0:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  a2:	8a b3       	in	r24, 0x1a	; 26
  a4:	94 2f       	mov	r25, r20
  a6:	90 95       	com	r25
  a8:	89 23       	and	r24, r25
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	46 23       	and	r20, r22
  b0:	48 2b       	or	r20, r24
  b2:	4a bb       	out	0x1a, r20	; 26
		}
		break;
  b4:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	94 2f       	mov	r25, r20
  ba:	90 95       	com	r25
  bc:	89 23       	and	r24, r25
  be:	87 bb       	out	0x17, r24	; 23
  c0:	87 b3       	in	r24, 0x17	; 23
  c2:	46 23       	and	r20, r22
  c4:	48 2b       	or	r20, r24
  c6:	47 bb       	out	0x17, r20	; 23
		}
		break;
  c8:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
  ca:	84 b3       	in	r24, 0x14	; 20
  cc:	94 2f       	mov	r25, r20
  ce:	90 95       	com	r25
  d0:	89 23       	and	r24, r25
  d2:	84 bb       	out	0x14, r24	; 20
  d4:	84 b3       	in	r24, 0x14	; 20
  d6:	46 23       	and	r20, r22
  d8:	48 2b       	or	r20, r24
  da:	44 bb       	out	0x14, r20	; 20
		}
		break;
  dc:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	94 2f       	mov	r25, r20
  e2:	90 95       	com	r25
  e4:	89 23       	and	r24, r25
  e6:	81 bb       	out	0x11, r24	; 17
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	46 23       	and	r20, r22
  ec:	48 2b       	or	r20, r24
  ee:	41 bb       	out	0x11, r20	; 17
  f0:	08 95       	ret

000000f2 <SPI_Init>:

void SPI_Init(void)
{
	u8 u8LoopCount;
	#if (Master_Or_Slave == SPI_MASTER_EN)
		GPIO_InitPortDirection(PB,0xB0,0xF0);// MOSI,MISO,SCK,SS Port direction
  f2:	40 ef       	ldi	r20, 0xF0	; 240
  f4:	60 eb       	ldi	r22, 0xB0	; 176
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_InitPortDirection>
		GPIO_InitPortDirection(PA,0xFF,0xFF);	//for displaying op
  fc:	4f ef       	ldi	r20, 0xFF	; 255
  fe:	6f ef       	ldi	r22, 0xFF	; 255
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_InitPortDirection>
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
	{
		if(clk[u8LoopCount].u32TempFreq < SPI_InitConfig.u32MaxFreq)
 106:	40 91 83 00 	lds	r20, 0x0083
 10a:	50 91 84 00 	lds	r21, 0x0084
 10e:	60 91 85 00 	lds	r22, 0x0085
 112:	70 91 86 00 	lds	r23, 0x0086
 116:	80 91 60 00 	lds	r24, 0x0060
 11a:	90 91 61 00 	lds	r25, 0x0061
 11e:	a0 91 62 00 	lds	r26, 0x0062
 122:	b0 91 63 00 	lds	r27, 0x0063
 126:	84 17       	cp	r24, r20
 128:	95 07       	cpc	r25, r21
 12a:	a6 07       	cpc	r26, r22
 12c:	b7 07       	cpc	r27, r23
 12e:	88 f0       	brcs	.+34     	; 0x152 <SPI_Init+0x60>
 130:	e5 e6       	ldi	r30, 0x65	; 101
 132:	f0 e0       	ldi	r31, 0x00	; 0
		GPIO_InitPortDirection(PA,0xFF,0xFF);  //for displaying op
			
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 134:	21 e0       	ldi	r18, 0x01	; 1
	{
		if(clk[u8LoopCount].u32TempFreq < SPI_InitConfig.u32MaxFreq)
 136:	80 81       	ld	r24, Z
 138:	91 81       	ldd	r25, Z+1	; 0x01
 13a:	a2 81       	ldd	r26, Z+2	; 0x02
 13c:	b3 81       	ldd	r27, Z+3	; 0x03
 13e:	84 17       	cp	r24, r20
 140:	95 07       	cpc	r25, r21
 142:	a6 07       	cpc	r26, r22
 144:	b7 07       	cpc	r27, r23
 146:	30 f0       	brcs	.+12     	; 0x154 <SPI_Init+0x62>
		GPIO_InitPortDirection(PA,0xFF,0xFF);  //for displaying op
			
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	35 96       	adiw	r30, 0x05	; 5
 14c:	27 30       	cpi	r18, 0x07	; 7
 14e:	99 f7       	brne	.-26     	; 0x136 <SPI_Init+0x44>
 150:	01 c0       	rjmp	.+2      	; 0x154 <SPI_Init+0x62>
 152:	20 e0       	ldi	r18, 0x00	; 0
		{
			break;
		}
	}
	
	SPCR_REG = 0X00;
 154:	1d b8       	out	0x0d, r1	; 13
	SPCR_REG |=  SPI_EN | SPI_InitConfig.u8DataOrder |Master_Or_Slave| SPI_InitConfig.u8Mode|(clk[u8LoopCount].u8RegVal & 0x03);
 156:	3d b1       	in	r19, 0x0d	; 13
 158:	82 2f       	mov	r24, r18
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	20 91 88 00 	lds	r18, 0x0088
 160:	32 2b       	or	r19, r18
 162:	30 65       	ori	r19, 0x50	; 80
 164:	20 91 87 00 	lds	r18, 0x0087
 168:	32 2b       	or	r19, r18
 16a:	fc 01       	movw	r30, r24
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	8e 0f       	add	r24, r30
 176:	9f 1f       	adc	r25, r31
 178:	fc 01       	movw	r30, r24
 17a:	e0 5a       	subi	r30, 0xA0	; 160
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	84 81       	ldd	r24, Z+4	; 0x04
 180:	28 2f       	mov	r18, r24
 182:	23 70       	andi	r18, 0x03	; 3
 184:	93 2f       	mov	r25, r19
 186:	92 2b       	or	r25, r18
 188:	9d b9       	out	0x0d, r25	; 13
	SPSR_REG = 0x00;
 18a:	1e b8       	out	0x0e, r1	; 14
	SPSR_REG |= (clk[u8LoopCount].u8RegVal >> 2);
 18c:	9e b1       	in	r25, 0x0e	; 14
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	89 2b       	or	r24, r25
 194:	8e b9       	out	0x0e, r24	; 14
	
	//with or without interrupt
	#if (ENABLE_INTERRUPT_OR_NOT == SPI_INT_EN)  //enable interrupt
		#if ( Master_Or_Slave == SPI_MASTER_EN) 
		//GPIO_InitPortDirection(PC,0xFF,0x01); //for INT1 
		sei();
 196:	78 94       	sei
		GPIO_InitPortDirection(PD,0x00,0x08);	//for INT1
 198:	48 e0       	ldi	r20, 0x08	; 8
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_InitPortDirection>
		//DDRD=0x00;
		GICR_REG |=(INT_1); //enable external interrupt of INT1
 1a2:	8b b7       	in	r24, 0x3b	; 59
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	8b bf       	out	0x3b, r24	; 59
		MCUCR_REG &=~(ISC_10); // enable interrupt on negative edge of INT1
 1a8:	85 b7       	in	r24, 0x35	; 53
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	85 bf       	out	0x35, r24	; 53
		MCUCR_REG |= (ISC_11) ;
 1ae:	85 b7       	in	r24, 0x35	; 53
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	85 bf       	out	0x35, r24	; 53
 1b4:	08 95       	ret

000001b6 <SPI_MasterTransmit>:
	#endif
}

void SPI_MasterTransmit (u8 data)
{
	SPDR_REG=data;
 1b6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR_REG & SPIF_0));
 1b8:	77 9b       	sbis	0x0e, 7	; 14
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <SPI_MasterTransmit+0x2>
}
 1bc:	08 95       	ret

000001be <__vector_2>:


ISR (INT1_vect)  //receive of Master with interrupt
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
	SPDR_REG = 0xFF;//garbage
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR_REG & SPIF_0));
 1ce:	77 9b       	sbis	0x0e, 7	; 14
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <__vector_2+0x10>
	PORTA =SPDR_REG;
 1d2:	8f b1       	in	r24, 0x0f	; 15
 1d4:	8b bb       	out	0x1b, r24	; 27
}
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_12>:
	SPCR_REG |= ENABLE_INTERRUPT_OR_NOT;
}


ISR (SPI_STC_vect)//receive for slave 
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
	PORTA =SPDR_REG;
 1ee:	8f b1       	in	r24, 0x0f	; 15
 1f0:	8b bb       	out	0x1b, r24	; 27
}
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <main>:
 */ 
#include "SPI.h"

void main()
{
	SPI_Init();
 1fe:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_Init>
	GPIO_InitPortDirection(PA,0xFF,0xFF);
 202:	4f ef       	ldi	r20, 0xFF	; 255
 204:	6f ef       	ldi	r22, 0xFF	; 255
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_InitPortDirection>
	while(1)
	{
		SPI_MasterTransmit(7);
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SPI_MasterTransmit>
 212:	fc cf       	rjmp	.-8      	; 0x20c <main+0xe>

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>

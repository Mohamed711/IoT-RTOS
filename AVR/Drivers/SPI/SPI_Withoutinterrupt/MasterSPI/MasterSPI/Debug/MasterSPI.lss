
MasterSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000080  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003a2  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000221  00000000  00000000  000005be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000213  00000000  00000000  000007df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000ac  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001e9  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002dd  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	81 f0       	breq	.+32     	; 0x90 <GPIO_InitPortDirection+0x24>
  70:	28 f0       	brcs	.+10     	; 0x7c <GPIO_InitPortDirection+0x10>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	b9 f0       	breq	.+46     	; 0xa4 <GPIO_InitPortDirection+0x38>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	f9 f0       	breq	.+62     	; 0xb8 <GPIO_InitPortDirection+0x4c>
  7a:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	94 2f       	mov	r25, r20
  80:	90 95       	com	r25
  82:	89 23       	and	r24, r25
  84:	8a bb       	out	0x1a, r24	; 26
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	46 23       	and	r20, r22
  8a:	48 2b       	or	r20, r24
  8c:	4a bb       	out	0x1a, r20	; 26
		}
		break;
  8e:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	94 2f       	mov	r25, r20
  94:	90 95       	com	r25
  96:	89 23       	and	r24, r25
  98:	87 bb       	out	0x17, r24	; 23
  9a:	87 b3       	in	r24, 0x17	; 23
  9c:	46 23       	and	r20, r22
  9e:	48 2b       	or	r20, r24
  a0:	47 bb       	out	0x17, r20	; 23
		}
		break;
  a2:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	94 2f       	mov	r25, r20
  a8:	90 95       	com	r25
  aa:	89 23       	and	r24, r25
  ac:	84 bb       	out	0x14, r24	; 20
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	46 23       	and	r20, r22
  b2:	48 2b       	or	r20, r24
  b4:	44 bb       	out	0x14, r20	; 20
		}
		break;
  b6:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
  b8:	81 b3       	in	r24, 0x11	; 17
  ba:	94 2f       	mov	r25, r20
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	81 bb       	out	0x11, r24	; 17
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	46 23       	and	r20, r22
  c6:	48 2b       	or	r20, r24
  c8:	41 bb       	out	0x11, r20	; 17
  ca:	08 95       	ret

000000cc <SPI_MasterInit>:
#include "GPIO.h"
//extern volatile u8 data;

void SPI_MasterInit(void)
{
	GPIO_InitPortDirection(PB,0xFF,0xB0);
  cc:	40 eb       	ldi	r20, 0xB0	; 176
  ce:	6f ef       	ldi	r22, 0xFF	; 255
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPortDirection>
	SPCR|=(1<<6)|(1<<5)|(1<<4)|(0x01); //interrupt enable DORD MSTR
  d6:	8d b1       	in	r24, 0x0d	; 13
  d8:	81 67       	ori	r24, 0x71	; 113
  da:	8d b9       	out	0x0d, r24	; 13
	GPIO_InitPortDirection(PA,0xFF,0xFF);
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	6f ef       	ldi	r22, 0xFF	; 255
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_InitPortDirection>
  e6:	08 95       	ret

000000e8 <SPI_MasterTransmit>:
	
}

void SPI_MasterTransmit (u8 data)
{
	SPDR=data;
  e8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<7)));
  ea:	77 9b       	sbis	0x0e, 7	; 14
  ec:	fe cf       	rjmp	.-4      	; 0xea <SPI_MasterTransmit+0x2>
}
  ee:	08 95       	ret

000000f0 <SPI_MasterTranceiver>:

void SPI_MasterTranceiver(u8 data)
{
	SPDR =data;
  f0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<7)));
  f2:	77 9b       	sbis	0x0e, 7	; 14
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <SPI_MasterTranceiver+0x2>
	PORTA =SPDR;
  f6:	8f b1       	in	r24, 0x0f	; 15
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	08 95       	ret

000000fc <main>:
//#include <avr/interrupt.h>
extern volatile u8 data1;
int main(void)
{
	
	SPI_MasterInit();
  fc:	0e 94 66 00 	call	0xcc	; 0xcc <SPI_MasterInit>
	//initInterrupt();
	//sei();
	//int data1=0x08;
	while(1)
	{
		SPI_MasterTransmit(16);
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_MasterTransmit>
		SPI_MasterTranceiver(8);
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_MasterTranceiver>
		SPI_MasterTranceiver(7);
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	0e 94 78 00 	call	0xf0	; 0xf0 <SPI_MasterTranceiver>
 112:	f6 cf       	rjmp	.-20     	; 0x100 <main+0x4>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>

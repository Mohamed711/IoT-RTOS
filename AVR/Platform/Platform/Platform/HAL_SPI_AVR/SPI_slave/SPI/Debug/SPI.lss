
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008c  0080008c  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ff  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000482  00000000  00000000  00000bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031c  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000501  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8a:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	81 f0       	breq	.+32     	; 0xb6 <GPIO_InitPortDirection+0x24>
  96:	28 f0       	brcs	.+10     	; 0xa2 <GPIO_InitPortDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b9 f0       	breq	.+46     	; 0xca <GPIO_InitPortDirection+0x38>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	f9 f0       	breq	.+62     	; 0xde <GPIO_InitPortDirection+0x4c>
  a0:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  a2:	8a b3       	in	r24, 0x1a	; 26
  a4:	94 2f       	mov	r25, r20
  a6:	90 95       	com	r25
  a8:	89 23       	and	r24, r25
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	46 23       	and	r20, r22
  b0:	48 2b       	or	r20, r24
  b2:	4a bb       	out	0x1a, r20	; 26
		}
		break;
  b4:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	94 2f       	mov	r25, r20
  ba:	90 95       	com	r25
  bc:	89 23       	and	r24, r25
  be:	87 bb       	out	0x17, r24	; 23
  c0:	87 b3       	in	r24, 0x17	; 23
  c2:	46 23       	and	r20, r22
  c4:	48 2b       	or	r20, r24
  c6:	47 bb       	out	0x17, r20	; 23
		}
		break;
  c8:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
  ca:	84 b3       	in	r24, 0x14	; 20
  cc:	94 2f       	mov	r25, r20
  ce:	90 95       	com	r25
  d0:	89 23       	and	r24, r25
  d2:	84 bb       	out	0x14, r24	; 20
  d4:	84 b3       	in	r24, 0x14	; 20
  d6:	46 23       	and	r20, r22
  d8:	48 2b       	or	r20, r24
  da:	44 bb       	out	0x14, r20	; 20
		}
		break;
  dc:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	94 2f       	mov	r25, r20
  e2:	90 95       	com	r25
  e4:	89 23       	and	r24, r25
  e6:	81 bb       	out	0x11, r24	; 17
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	46 23       	and	r20, r22
  ec:	48 2b       	or	r20, r24
  ee:	41 bb       	out	0x11, r20	; 17
  f0:	08 95       	ret

000000f2 <SPI_Init>:


static volatile u8 u8LoopCount;

void SPI_Init(u32 u32MaxFreq, u8 u8Mode, u8 u8DataOrder)
{
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24
 102:	d4 2f       	mov	r29, r20
 104:	c2 2f       	mov	r28, r18
	#if (Master_Or_Slave == SPI_MASTER_EN)
		GPIO_InitPortDirection(PB,0xB0,0xF0);// MOSI,MISO,SCK,SS Port direction
	
	#else
		/* Set MISO output, all others input */
		GPIO_InitPortDirection(PB,0x40,0xF0); //only MISO configured as op , others conf as ip
 106:	40 ef       	ldi	r20, 0xF0	; 240
 108:	60 e4       	ldi	r22, 0x40	; 64
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_InitPortDirection>
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
	{
		if(clk[u8LoopCount].u32TempFreq <= u32MaxFreq)
 110:	80 91 68 00 	lds	r24, 0x0068
 114:	90 91 69 00 	lds	r25, 0x0069
 118:	a0 91 6a 00 	lds	r26, 0x006A
 11c:	b0 91 6b 00 	lds	r27, 0x006B
 120:	c8 16       	cp	r12, r24
 122:	d9 06       	cpc	r13, r25
 124:	ea 06       	cpc	r14, r26
 126:	fb 06       	cpc	r15, r27
 128:	88 f4       	brcc	.+34     	; 0x14c <SPI_Init+0x5a>
 12a:	ed e6       	ldi	r30, 0x6D	; 109
 12c:	f0 e0       	ldi	r31, 0x00	; 0
		GPIO_InitPortDirection(PB,0x40,0xF0); //only MISO configured as op , others conf as ip
	
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 12e:	21 e0       	ldi	r18, 0x01	; 1
	{
		if(clk[u8LoopCount].u32TempFreq <= u32MaxFreq)
 130:	80 81       	ld	r24, Z
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	a2 81       	ldd	r26, Z+2	; 0x02
 136:	b3 81       	ldd	r27, Z+3	; 0x03
 138:	c8 16       	cp	r12, r24
 13a:	d9 06       	cpc	r13, r25
 13c:	ea 06       	cpc	r14, r26
 13e:	fb 06       	cpc	r15, r27
 140:	30 f4       	brcc	.+12     	; 0x14e <SPI_Init+0x5c>
		GPIO_InitPortDirection(PB,0x40,0xF0); //only MISO configured as op , others conf as ip
	
	#endif
	
	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	35 96       	adiw	r30, 0x05	; 5
 146:	27 30       	cpi	r18, 0x07	; 7
 148:	99 f7       	brne	.-26     	; 0x130 <SPI_Init+0x3e>
 14a:	01 c0       	rjmp	.+2      	; 0x14e <SPI_Init+0x5c>
 14c:	20 e0       	ldi	r18, 0x00	; 0
		{
			break;
		}
	}
	
	SPCR_REG = 0X00;
 14e:	1d b8       	out	0x0d, r1	; 13
	SPCR_REG |=  SPI_EN | u8DataOrder |Master_Or_Slave| u8Mode|(clk[u8LoopCount].u8RegVal & 0x03);
 150:	3d b1       	in	r19, 0x0d	; 13
 152:	82 2f       	mov	r24, r18
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	30 64       	ori	r19, 0x40	; 64
 158:	fc 01       	movw	r30, r24
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	8e 0f       	add	r24, r30
 164:	9f 1f       	adc	r25, r31
 166:	fc 01       	movw	r30, r24
 168:	e8 59       	subi	r30, 0x98	; 152
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	84 81       	ldd	r24, Z+4	; 0x04
 16e:	28 2f       	mov	r18, r24
 170:	23 70       	andi	r18, 0x03	; 3
 172:	93 2f       	mov	r25, r19
 174:	92 2b       	or	r25, r18
 176:	d9 2b       	or	r29, r25
 178:	cd 2b       	or	r28, r29
 17a:	cd b9       	out	0x0d, r28	; 13
	SPSR_REG = 0x00;
 17c:	1e b8       	out	0x0e, r1	; 14
	SPSR_REG |= (clk[u8LoopCount].u8RegVal >> 2);
 17e:	9e b1       	in	r25, 0x0e	; 14
 180:	86 95       	lsr	r24
 182:	86 95       	lsr	r24
 184:	89 2b       	or	r24, r25
 186:	8e b9       	out	0x0e, r24	; 14
	
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	df 90       	pop	r13
 192:	cf 90       	pop	r12
 194:	08 95       	ret

00000196 <__vector_2>:
	while(!(SPSR_REG & SPIF_0));
}
*/

ISR (INT1_vect)  //receive of Master with interrupt
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
	SPDR_REG = 0xFF;//garbage
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR_REG & SPIF_0));
 1a6:	77 9b       	sbis	0x0e, 7	; 14
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <__vector_2+0x10>
	SPI_DATA =SPDR_REG;
 1aa:	8f b1       	in	r24, 0x0f	; 15
 1ac:	80 93 8c 00 	sts	0x008C, r24
}
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_12>:
	SPCR_REG |= ENABLE_INTERRUPT_OR_NOT;
}*/


ISR (SPI_STC_vect)//receive for slave 
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
	SPI_DATA=SPDR_REG;
 1c8:	8f b1       	in	r24, 0x0f	; 15
 1ca:	80 93 8c 00 	sts	0x008C, r24
}
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <SPI_Tranceiver>:


u8 SPI_Tranceiver(u8 data)
{
	SPDR_REG =data;
 1da:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR_REG & SPIF_0));
 1dc:	77 9b       	sbis	0x0e, 7	; 14
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <SPI_Tranceiver+0x2>
	return SPDR_REG;
 1e0:	8f b1       	in	r24, 0x0f	; 15
}
 1e2:	08 95       	ret

000001e4 <main>:
 };
 
void main()
{
	//SPI_Init();
	GPIO_InitPortDirection(PA,0xFF,0xFF);
 1e4:	4f ef       	ldi	r20, 0xFF	; 255
 1e6:	6f ef       	ldi	r22, 0xFF	; 255
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_InitPortDirection>
	//SPI_SlaveTransmit(7);
	//SPI_SlaveTransmit(8);
	//SPI_SlaveTransmit(7);
	HAL_SPI_Init( &spi);
 1ee:	82 e6       	ldi	r24, 0x62	; 98
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 0a 01 	call	0x214	; 0x214 <HAL_SPI_Init>
	
	while(1)
	{
		SPIDATA.Txdata=8;
 1f6:	c0 e6       	ldi	r28, 0x60	; 96
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	08 e0       	ldi	r16, 0x08	; 8
		SPIDATA.Rxdata=HAL_SPI_Receive(&SPIDATA);
		PORTA=SPIDATA.Rxdata;
 1fc:	17 e0       	ldi	r17, 0x07	; 7
	//SPI_SlaveTransmit(7);
	HAL_SPI_Init( &spi);
	
	while(1)
	{
		SPIDATA.Txdata=8;
 1fe:	08 83       	st	Y, r16
		SPIDATA.Rxdata=HAL_SPI_Receive(&SPIDATA);
 200:	ce 01       	movw	r24, r28
 202:	0e 94 14 01 	call	0x228	; 0x228 <HAL_SPI_Receive>
 206:	8b bb       	out	0x1b, r24	; 27
		PORTA=SPIDATA.Rxdata;
 208:	18 83       	st	Y, r17
		SPIDATA.Txdata=7;
 20a:	ce 01       	movw	r24, r28
 20c:	0e 94 14 01 	call	0x228	; 0x228 <HAL_SPI_Receive>
 210:	8b bb       	out	0x1b, r24	; 27
 212:	f5 cf       	rjmp	.-22     	; 0x1fe <main+0x1a>

00000214 <HAL_SPI_Init>:
	{F_CPU/64,2},
	{F_CPU/128,3}
};

void HAL_SPI_Init(SPI_INITTypeDef * spi)
{
 214:	fc 01       	movw	r30, r24
	SPI_Init(spi->u32MaxFreq, spi->u8Mode, spi->u8DataOrder);
 216:	60 81       	ld	r22, Z
 218:	71 81       	ldd	r23, Z+1	; 0x01
 21a:	82 81       	ldd	r24, Z+2	; 0x02
 21c:	93 81       	ldd	r25, Z+3	; 0x03
 21e:	25 81       	ldd	r18, Z+5	; 0x05
 220:	44 81       	ldd	r20, Z+4	; 0x04
 222:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_Init>
 226:	08 95       	ret

00000228 <HAL_SPI_Receive>:
	SPI_Transmit(SPIDATA->Txdata);
}

u8 HAL_SPI_Receive(SPI_HandleTypeDef * SPIDATA)
{
	return SPI_Tranceiver(SPIDATA->Txdata);
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	0e 94 ed 00 	call	0x1da	; 0x1da <SPI_Tranceiver>
}
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>

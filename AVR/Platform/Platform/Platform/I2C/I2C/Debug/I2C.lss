
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000031c  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a84  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c3  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000746  00000000  00000000  00001a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fe  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fa  00000000  00000000  000025de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8a:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_InitPortDirection>:
#define READ_REG(Reg,Mask) Reg & Mask

void DIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	/* check the required port, specified bits and direction on the Data Direction Register */
	switch(PortName)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	89 f0       	breq	.+34     	; 0xb8 <DIO_InitPortDirection+0x26>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_InitPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b9 f0       	breq	.+46     	; 0xcc <DIO_InitPortDirection+0x3a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f5       	brne	.+80     	; 0xf2 <DIO_InitPortDirection+0x60>
  a2:	1e c0       	rjmp	.+60     	; 0xe0 <DIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	94 2f       	mov	r25, r20
  a8:	90 95       	com	r25
  aa:	89 23       	and	r24, r25
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	64 23       	and	r22, r20
  b2:	68 2b       	or	r22, r24
  b4:	6a bb       	out	0x1a, r22	; 26
		}
		break;
  b6:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	94 2f       	mov	r25, r20
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	64 23       	and	r22, r20
  c6:	68 2b       	or	r22, r24
  c8:	67 bb       	out	0x17, r22	; 23
		}
		break;
  ca:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	94 2f       	mov	r25, r20
  d0:	90 95       	com	r25
  d2:	89 23       	and	r24, r25
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	84 b3       	in	r24, 0x14	; 20
  d8:	64 23       	and	r22, r20
  da:	68 2b       	or	r22, r24
  dc:	64 bb       	out	0x14, r22	; 20
		}
		break;
  de:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	94 2f       	mov	r25, r20
  e4:	90 95       	com	r25
  e6:	89 23       	and	r24, r25
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	64 23       	and	r22, r20
  ee:	68 2b       	or	r22, r24
  f0:	61 bb       	out	0x11, r22	; 17
  f2:	08 95       	ret

000000f4 <DIO_WritePort>:
}

void DIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	/* check the required port, specified bits and value on the Port Data Register */
	switch(PortName)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	89 f0       	breq	.+34     	; 0x11a <DIO_WritePort+0x26>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_WritePort+0x12>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	b9 f0       	breq	.+46     	; 0x12e <DIO_WritePort+0x3a>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	41 f5       	brne	.+80     	; 0x154 <DIO_WritePort+0x60>
 104:	1e c0       	rjmp	.+60     	; 0x142 <DIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	94 2f       	mov	r25, r20
 10a:	90 95       	com	r25
 10c:	89 23       	and	r24, r25
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	64 23       	and	r22, r20
 114:	68 2b       	or	r22, r24
 116:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 118:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	94 2f       	mov	r25, r20
 11e:	90 95       	com	r25
 120:	89 23       	and	r24, r25
 122:	88 bb       	out	0x18, r24	; 24
 124:	88 b3       	in	r24, 0x18	; 24
 126:	64 23       	and	r22, r20
 128:	68 2b       	or	r22, r24
 12a:	68 bb       	out	0x18, r22	; 24
		}
		break;
 12c:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	94 2f       	mov	r25, r20
 132:	90 95       	com	r25
 134:	89 23       	and	r24, r25
 136:	85 bb       	out	0x15, r24	; 21
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	64 23       	and	r22, r20
 13c:	68 2b       	or	r22, r24
 13e:	65 bb       	out	0x15, r22	; 21
		}
		break;
 140:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 142:	82 b3       	in	r24, 0x12	; 18
 144:	94 2f       	mov	r25, r20
 146:	90 95       	com	r25
 148:	89 23       	and	r24, r25
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	64 23       	and	r22, r20
 150:	68 2b       	or	r22, r24
 152:	62 bb       	out	0x12, r22	; 18
 154:	08 95       	ret

00000156 <DIO_ReadPort>:
}
u8 DIO_ReadPort(u8 PortName,u8 PortMAsk)
{
	/* check the required port, specified bits and value from the Port input Register */
	u8 Data;
	switch(PortName)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	51 f0       	breq	.+20     	; 0x16e <DIO_ReadPort+0x18>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_ReadPort+0x12>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	49 f0       	breq	.+18     	; 0x174 <DIO_ReadPort+0x1e>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	61 f4       	brne	.+24     	; 0x17e <DIO_ReadPort+0x28>
 166:	09 c0       	rjmp	.+18     	; 0x17a <DIO_ReadPort+0x24>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMAsk);
 168:	99 b3       	in	r25, 0x19	; 25
 16a:	96 23       	and	r25, r22
		}
		break;
 16c:	08 c0       	rjmp	.+16     	; 0x17e <DIO_ReadPort+0x28>
		case PB:
		{
			Data = READ_REG(PINB,PortMAsk);
 16e:	96 b3       	in	r25, 0x16	; 22
 170:	96 23       	and	r25, r22
		}
		break;
 172:	05 c0       	rjmp	.+10     	; 0x17e <DIO_ReadPort+0x28>
		case PC:
		{
			Data = READ_REG(PINC,PortMAsk);
 174:	93 b3       	in	r25, 0x13	; 19
 176:	96 23       	and	r25, r22
		}
		break;
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_ReadPort+0x28>
		case PD:
		{
			Data = READ_REG(PIND,PortMAsk);
 17a:	90 b3       	in	r25, 0x10	; 16
 17c:	96 23       	and	r25, r22
		break;
		
	}
	return Data;
	
 17e:	89 2f       	mov	r24, r25
 180:	08 95       	ret

00000182 <HAL_I2C_Init>:
#include "HAL_i2c_AVR.h"
#include "I2C.h"


void HAL_I2C_Init(I2C_InitTypeDef *i2c)
{
 182:	fc 01       	movw	r30, r24
	if(i2c->type == 0) /* master */
 184:	80 81       	ld	r24, Z
 186:	88 23       	and	r24, r24
 188:	29 f4       	brne	.+10     	; 0x194 <HAL_I2C_Init+0x12>
	{
		masterInit(i2c->clock);
 18a:	81 81       	ldd	r24, Z+1	; 0x01
 18c:	92 81       	ldd	r25, Z+2	; 0x02
 18e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <masterInit>
 192:	08 95       	ret
	}
	else if(i2c->type == 1) /* slave */
	{
		slaveInit(i2c->SlaveAddress);
 194:	83 81       	ldd	r24, Z+3	; 0x03
 196:	0e 94 1c 01 	call	0x238	; 0x238 <slaveInit>
 19a:	08 95       	ret

0000019c <HAL_I2C_Master_Transmit>:
	}
}

void HAL_I2C_Master_Transmit(I2C_HandleTypeDef *i2c)
{
 19c:	fc 01       	movw	r30, r24
	masterTransmit(i2c->slaveAddress ,i2c->Txdata);
 19e:	80 81       	ld	r24, Z
 1a0:	61 81       	ldd	r22, Z+1	; 0x01
 1a2:	0e 94 08 01 	call	0x210	; 0x210 <masterTransmit>
}
 1a6:	08 95       	ret

000001a8 <HAL_I2C_Master_Receive>:

void HAL_I2C_Master_Receive(I2C_HandleTypeDef *i2c)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	i2c->Rxdata = masterReceive();	
 1ae:	0e 94 15 01 	call	0x22a	; 0x22a <masterReceive>
 1b2:	8a 83       	std	Y+2, r24	; 0x02
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <HAL_I2C_Slave_Transmit>:

void HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *i2c)
{
	slaveTransmit(i2c->Txdata);
 1ba:	fc 01       	movw	r30, r24
 1bc:	81 81       	ldd	r24, Z+1	; 0x01
 1be:	0e 94 2d 01 	call	0x25a	; 0x25a <slaveTransmit>
}
 1c2:	08 95       	ret

000001c4 <HAL_I2C_Slave_Receive>:

void HAL_I2C_Slave_Receive(I2C_HandleTypeDef *i2c)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
	i2c->Rxdata = slaveReceive();
 1ca:	0e 94 32 01 	call	0x264	; 0x264 <slaveReceive>
 1ce:	8a 83       	std	Y+2, r24	; 0x02
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <masterInit>:
it initialize the kite as the master					*
it takes 1 parameter ClockRate							*
*********************************************************/
void masterInit(uint16_t ClockRate)
{
	TWBR_REG = ((F_CPU/ClockRate) - 16)/2;
 1d6:	9c 01       	movw	r18, r24
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	72 e1       	ldi	r23, 0x12	; 18
 1e0:	8a e7       	ldi	r24, 0x7A	; 122
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <__udivmodsi4>
 1e8:	da 01       	movw	r26, r20
 1ea:	c9 01       	movw	r24, r18
 1ec:	40 97       	sbiw	r24, 0x10	; 16
 1ee:	a1 09       	sbc	r26, r1
 1f0:	b1 09       	sbc	r27, r1
 1f2:	b6 95       	lsr	r27
 1f4:	a7 95       	ror	r26
 1f6:	97 95       	ror	r25
 1f8:	87 95       	ror	r24
 1fa:	80 93 00 00 	sts	0x0000, r24
	TWCR_REG = (1<<TWEN); /* Enable I2C */
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	86 bb       	out	0x16, r24	; 22
	TWSR_REG = 0x00;  /* prescaler set to 1 (option) */
 202:	10 92 01 00 	sts	0x0001, r1
	/*****Start*****/
	TWCR_REG = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); /* start condition */
 206:	84 ea       	ldi	r24, 0xA4	; 164
 208:	86 bb       	out	0x16, r24	; 22
	while(!(TWCR_REG & (1<<TWINT)));  /* check start condition */
 20a:	b7 9b       	sbis	0x16, 7	; 22
 20c:	fe cf       	rjmp	.-4      	; 0x20a <masterInit+0x34>
}
 20e:	08 95       	ret

00000210 <masterTransmit>:
it takes 2 parameters x & y	(char)						*
x -> slave address , y-> data needed to be transmitted	*
*********************************************************/
void masterTransmit(char x,char y)
{
	TWDR_REG = x;  /* slave address */
 210:	80 93 03 00 	sts	0x0003, r24
	TWCR_REG = (1<<TWINT) | (1<<TWEN); /* Enable I2C and clear interrupt */
 214:	84 e8       	ldi	r24, 0x84	; 132
 216:	86 bb       	out	0x16, r24	; 22
	while(!(TWCR_REG & (1<<TWINT))); /* write succeeded with TWDR empty */
 218:	b7 9b       	sbis	0x16, 7	; 22
 21a:	fe cf       	rjmp	.-4      	; 0x218 <masterTransmit+0x8>
	
	TWDR_REG = y;  /* data itself */
 21c:	60 93 03 00 	sts	0x0003, r22
	TWCR_REG = (1<<TWINT) | (1<<TWEN); /* Enable I2C and clear interrupt */
 220:	84 e8       	ldi	r24, 0x84	; 132
 222:	86 bb       	out	0x16, r24	; 22
	while(!(TWCR_REG & (1<<TWINT))); /* write succeeded with TWDR empty */
 224:	b7 9b       	sbis	0x16, 7	; 22
 226:	fe cf       	rjmp	.-4      	; 0x224 <masterTransmit+0x14>
}
 228:	08 95       	ret

0000022a <masterReceive>:
it doesn't take any parameters						*
it return data (char)								*
*****************************************************/
char masterReceive()
{
	TWCR_REG = (1<<TWEN) | (1<<TWINT); /* enable I2C and clear interrupt */
 22a:	84 e8       	ldi	r24, 0x84	; 132
 22c:	86 bb       	out	0x16, r24	; 22
	while(!(TWCR_REG & (1<<TWINT))); /* read succeeded with all data received */
 22e:	b7 9b       	sbis	0x16, 7	; 22
 230:	fe cf       	rjmp	.-4      	; 0x22e <masterReceive+0x4>
	return TWDR_REG;
 232:	80 91 03 00 	lds	r24, 0x0003
}
 236:	08 95       	ret

00000238 <slaveInit>:
it initialize the kite as the slave				*
it takes 1 parameter which is the slave address	* 
 ************************************************/
void slaveInit(uint8_t address)
{
	TWBR_REG=1;
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	90 93 00 00 	sts	0x0000, r25
	/* Setting up the SCL frequency by writing a value in TWBR */
	TWSR_REG|=(0<<TWPS1)|(0<<TWPS0);
 23e:	e1 e0       	ldi	r30, 0x01	; 1
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	90 83       	st	Z, r25
	TWAR_REG=address;
 246:	80 93 02 00 	sts	0x0002, r24
	/* The first seven bits indicate the slave address */
	TWCR_REG|=(1<<TWINT)|(1<<TWEN)|(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO);
 24a:	86 b3       	in	r24, 0x16	; 22
 24c:	84 6c       	ori	r24, 0xC4	; 196
 24e:	86 bb       	out	0x16, r24	; 22
	/* Enabling Acknowledge function */
	while (!(TWCR_REG & (1<<TWINT)));
 250:	b7 9b       	sbis	0x16, 7	; 22
 252:	fe cf       	rjmp	.-4      	; 0x250 <slaveInit+0x18>
	/*Wait for the interrupt to be cleared as it will indicate the successful reception */
	while(TWCR_REG&(0xF8)!=(0x60));
 254:	b0 99       	sbic	0x16, 0	; 22
 256:	fe cf       	rjmp	.-4      	; 0x254 <slaveInit+0x1c>
	/* Checking if the self-address+W has been received and ACK has been sent */
	
}
 258:	08 95       	ret

0000025a <slaveTransmit>:
to be transmitted from the slave							*
*************************************************************/
void slaveTransmit(char write_data)
{
	/* Fill TWDR register with the data to be sent */
	TWDR_REG= write_data;
 25a:	80 93 03 00 	sts	0x0003, r24
	/* Enable TWI, Clear TWI interrupt flag */
	TWCR_REG= (1<<TWEN)|(1<<TWINT);
 25e:	84 e8       	ldi	r24, 0x84	; 132
 260:	86 bb       	out	0x16, r24	; 22
	/* Wait for the acknowledgment */
	//while((TWSR & 0xF8) != 0xB8); /* 0xC0 for NACK */
}
 262:	08 95       	ret

00000264 <slaveReceive>:
*****************************************************/
char slaveReceive(void)
{
	char recv_data;
	/* Clear TWI interrupt flag,Get acknowledgment, Enable TWI */
	TWCR_REG= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
 264:	84 ec       	ldi	r24, 0xC4	; 196
 266:	86 bb       	out	0x16, r24	; 22
	/* Wait for TWINT flag */
	while (!(TWCR_REG & (1<<TWINT)));
 268:	b7 9b       	sbis	0x16, 7	; 22
 26a:	fe cf       	rjmp	.-4      	; 0x268 <slaveReceive+0x4>
	/* Wait for acknowledgment */
	while((TWSR_REG & 0xF8)!=0x80);/* 0x88 for NACK */
 26c:	e1 e0       	ldi	r30, 0x01	; 1
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	88 7f       	andi	r24, 0xF8	; 248
 274:	80 38       	cpi	r24, 0x80	; 128
 276:	e1 f7       	brne	.-8      	; 0x270 <slaveReceive+0xc>
	/* Get value from TWDR */
	recv_data=TWDR_REG;
 278:	80 91 03 00 	lds	r24, 0x0003
	/* send the receive value on PORTB */
	return recv_data;
 27c:	08 95       	ret

0000027e <main>:
#include <util/delay.h>
//#include "I2C_Lcfg.h"
#include "HAL_i2c_AVR.h"

int main(void)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	27 97       	sbiw	r28, 0x07	; 7
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
	DIO_InitPortDirection(0x00,0xFF,0xFF); /* define port A output */
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	6f ef       	ldi	r22, 0xFF	; 255
 296:	4f ef       	ldi	r20, 0xFF	; 255
 298:	0e 94 49 00 	call	0x92	; 0x92 <DIO_InitPortDirection>

	I2C_InitTypeDef init;
	init.clock=9600; /* setting clock rate */
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	95 e2       	ldi	r25, 0x25	; 37
 2a0:	9b 83       	std	Y+3, r25	; 0x03
 2a2:	8a 83       	std	Y+2, r24	; 0x02
	init.SlaveAddress=0x40; /* write to slave */
 2a4:	80 e4       	ldi	r24, 0x40	; 64
 2a6:	8c 83       	std	Y+4, r24	; 0x04
	init.type=0;
 2a8:	19 82       	std	Y+1, r1	; 0x01
	
	I2C_HandleTypeDef handle;
	handle.slaveAddress=0x40;
 2aa:	8d 83       	std	Y+5, r24	; 0x05
	handle.Txdata=0x55;
 2ac:	85 e5       	ldi	r24, 0x55	; 85
 2ae:	8e 83       	std	Y+6, r24	; 0x06
	
	HAL_I2C_Init(&init);
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	0e 94 c1 00 	call	0x182	; 0x182 <HAL_I2C_Init>

	while (1)
	{
		HAL_I2C_Master_Transmit(&handle);
 2b8:	ce 01       	movw	r24, r28
 2ba:	05 96       	adiw	r24, 0x05	; 5
 2bc:	0e 94 ce 00 	call	0x19c	; 0x19c <HAL_I2C_Master_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	99 e6       	ldi	r25, 0x69	; 105
 2c4:	a8 e1       	ldi	r26, 0x18	; 24
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	a0 40       	sbci	r26, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x48>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x52>
 2d0:	00 00       	nop
 2d2:	f2 cf       	rjmp	.-28     	; 0x2b8 <main+0x3a>

000002d4 <__udivmodsi4>:
 2d4:	a1 e2       	ldi	r26, 0x21	; 33
 2d6:	1a 2e       	mov	r1, r26
 2d8:	aa 1b       	sub	r26, r26
 2da:	bb 1b       	sub	r27, r27
 2dc:	fd 01       	movw	r30, r26
 2de:	0d c0       	rjmp	.+26     	; 0x2fa <__udivmodsi4_ep>

000002e0 <__udivmodsi4_loop>:
 2e0:	aa 1f       	adc	r26, r26
 2e2:	bb 1f       	adc	r27, r27
 2e4:	ee 1f       	adc	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	a2 17       	cp	r26, r18
 2ea:	b3 07       	cpc	r27, r19
 2ec:	e4 07       	cpc	r30, r20
 2ee:	f5 07       	cpc	r31, r21
 2f0:	20 f0       	brcs	.+8      	; 0x2fa <__udivmodsi4_ep>
 2f2:	a2 1b       	sub	r26, r18
 2f4:	b3 0b       	sbc	r27, r19
 2f6:	e4 0b       	sbc	r30, r20
 2f8:	f5 0b       	sbc	r31, r21

000002fa <__udivmodsi4_ep>:
 2fa:	66 1f       	adc	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	88 1f       	adc	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	1a 94       	dec	r1
 304:	69 f7       	brne	.-38     	; 0x2e0 <__udivmodsi4_loop>
 306:	60 95       	com	r22
 308:	70 95       	com	r23
 30a:	80 95       	com	r24
 30c:	90 95       	com	r25
 30e:	9b 01       	movw	r18, r22
 310:	ac 01       	movw	r20, r24
 312:	bd 01       	movw	r22, r26
 314:	cf 01       	movw	r24, r30
 316:	08 95       	ret

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>


Master_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  0000044c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098b  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000350  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ef  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d8  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a5  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  8a:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_InitPortDirection>:
#define READ_REG(Reg,Mask) Reg & Mask

void DIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	//check the required port, specified bits and direction on the Data Direction Register
	switch(PortName)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	89 f0       	breq	.+34     	; 0xb8 <DIO_InitPortDirection+0x26>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_InitPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	b9 f0       	breq	.+46     	; 0xcc <DIO_InitPortDirection+0x3a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f5       	brne	.+80     	; 0xf2 <DIO_InitPortDirection+0x60>
  a2:	1e c0       	rjmp	.+60     	; 0xe0 <DIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	94 2f       	mov	r25, r20
  a8:	90 95       	com	r25
  aa:	89 23       	and	r24, r25
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	64 23       	and	r22, r20
  b2:	68 2b       	or	r22, r24
  b4:	6a bb       	out	0x1a, r22	; 26
		}
		break;
  b6:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	94 2f       	mov	r25, r20
  bc:	90 95       	com	r25
  be:	89 23       	and	r24, r25
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	64 23       	and	r22, r20
  c6:	68 2b       	or	r22, r24
  c8:	67 bb       	out	0x17, r22	; 23
		}
		break;
  ca:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	94 2f       	mov	r25, r20
  d0:	90 95       	com	r25
  d2:	89 23       	and	r24, r25
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	84 b3       	in	r24, 0x14	; 20
  d8:	64 23       	and	r22, r20
  da:	68 2b       	or	r22, r24
  dc:	64 bb       	out	0x14, r22	; 20
		}
		break;
  de:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	94 2f       	mov	r25, r20
  e4:	90 95       	com	r25
  e6:	89 23       	and	r24, r25
  e8:	81 bb       	out	0x11, r24	; 17
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	64 23       	and	r22, r20
  ee:	68 2b       	or	r22, r24
  f0:	61 bb       	out	0x11, r22	; 17
  f2:	08 95       	ret

000000f4 <DIO_WritePort>:
}

void DIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	//check the required port, specified bits and value on the Port Data Register
	switch(PortName)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	89 f0       	breq	.+34     	; 0x11a <DIO_WritePort+0x26>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_WritePort+0x12>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	b9 f0       	breq	.+46     	; 0x12e <DIO_WritePort+0x3a>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	41 f5       	brne	.+80     	; 0x154 <DIO_WritePort+0x60>
 104:	1e c0       	rjmp	.+60     	; 0x142 <DIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	94 2f       	mov	r25, r20
 10a:	90 95       	com	r25
 10c:	89 23       	and	r24, r25
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	64 23       	and	r22, r20
 114:	68 2b       	or	r22, r24
 116:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 118:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	94 2f       	mov	r25, r20
 11e:	90 95       	com	r25
 120:	89 23       	and	r24, r25
 122:	88 bb       	out	0x18, r24	; 24
 124:	88 b3       	in	r24, 0x18	; 24
 126:	64 23       	and	r22, r20
 128:	68 2b       	or	r22, r24
 12a:	68 bb       	out	0x18, r22	; 24
		}
		break;
 12c:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	94 2f       	mov	r25, r20
 132:	90 95       	com	r25
 134:	89 23       	and	r24, r25
 136:	85 bb       	out	0x15, r24	; 21
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	64 23       	and	r22, r20
 13c:	68 2b       	or	r22, r24
 13e:	65 bb       	out	0x15, r22	; 21
		}
		break;
 140:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 142:	82 b3       	in	r24, 0x12	; 18
 144:	94 2f       	mov	r25, r20
 146:	90 95       	com	r25
 148:	89 23       	and	r24, r25
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	64 23       	and	r22, r20
 150:	68 2b       	or	r22, r24
 152:	62 bb       	out	0x12, r22	; 18
 154:	08 95       	ret

00000156 <DIO_ReadPort>:
}
u8 DIO_ReadPort(u8 PortName,u8 PortMAsk)
{
	//check the required port, specified bits and value from the Port input Register
	u8 Data;
	switch(PortName)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	51 f0       	breq	.+20     	; 0x16e <DIO_ReadPort+0x18>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_ReadPort+0x12>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	49 f0       	breq	.+18     	; 0x174 <DIO_ReadPort+0x1e>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	61 f4       	brne	.+24     	; 0x17e <DIO_ReadPort+0x28>
 166:	09 c0       	rjmp	.+18     	; 0x17a <DIO_ReadPort+0x24>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMAsk);
 168:	99 b3       	in	r25, 0x19	; 25
 16a:	96 23       	and	r25, r22
		}
		break;
 16c:	08 c0       	rjmp	.+16     	; 0x17e <DIO_ReadPort+0x28>
		case PB:
		{
			Data = READ_REG(PINB,PortMAsk);
 16e:	96 b3       	in	r25, 0x16	; 22
 170:	96 23       	and	r25, r22
		}
		break;
 172:	05 c0       	rjmp	.+10     	; 0x17e <DIO_ReadPort+0x28>
		case PC:
		{
			Data = READ_REG(PINC,PortMAsk);
 174:	93 b3       	in	r25, 0x13	; 19
 176:	96 23       	and	r25, r22
		}
		break;
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_ReadPort+0x28>
		case PD:
		{
			Data = READ_REG(PIND,PortMAsk);
 17a:	90 b3       	in	r25, 0x10	; 16
 17c:	96 23       	and	r25, r22
		break;
		
	}
	return Data;
	
 17e:	89 2f       	mov	r24, r25
 180:	08 95       	ret

00000182 <main>:
#include "USART.h"
#include "USART_CFG.h"

int main(void)
{
	usart_init();
 182:	0e 94 c7 00 	call	0x18e	; 0x18e <usart_init>
    while(1)
    {
		usart_transmit('A');
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 54 01 	call	0x2a8	; 0x2a8 <usart_transmit>
 18c:	fc cf       	rjmp	.-8      	; 0x186 <main+0x4>

0000018e <usart_init>:

//#define USART_BAUDRATE 115200
//#define UBRR_VALUE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void usart_init(void)
{
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
	/*Baud Rate*/
	//u16 UBRR_VALUE = ((F_CPU)/(Baud*16UL)-1);
	u16 UBRR_VALUE;
	if(usart_init_config.U2X_State != 0)
 196:	80 91 68 00 	lds	r24, 0x0068
 19a:	88 23       	and	r24, r24
 19c:	69 f1       	breq	.+90     	; 0x1f8 <usart_init+0x6a>
	{
		UBRR_VALUE = (u16)((F_CPU + usart_init_config.Baud*4UL)/(usart_init_config.Baud*8UL) - 1UL);
 19e:	80 91 60 00 	lds	r24, 0x0060
 1a2:	90 91 61 00 	lds	r25, 0x0061
 1a6:	a0 91 62 00 	lds	r26, 0x0062
 1aa:	b0 91 63 00 	lds	r27, 0x0063
 1ae:	ac 01       	movw	r20, r24
 1b0:	bd 01       	movw	r22, r26
 1b2:	40 58       	subi	r20, 0x80	; 128
 1b4:	5b 47       	sbci	r21, 0x7B	; 123
 1b6:	61 4e       	sbci	r22, 0xE1	; 225
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ba:	6a 01       	movw	r12, r20
 1bc:	7b 01       	movw	r14, r22
 1be:	cc 0c       	add	r12, r12
 1c0:	dd 1c       	adc	r13, r13
 1c2:	ee 1c       	adc	r14, r14
 1c4:	ff 1c       	adc	r15, r15
 1c6:	cc 0c       	add	r12, r12
 1c8:	dd 1c       	adc	r13, r13
 1ca:	ee 1c       	adc	r14, r14
 1cc:	ff 1c       	adc	r15, r15
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	aa 1f       	adc	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	9c 01       	movw	r18, r24
 1e0:	ad 01       	movw	r20, r26
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	44 1f       	adc	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	c7 01       	movw	r24, r14
 1ec:	b6 01       	movw	r22, r12
 1ee:	0e 94 b3 01 	call	0x366	; 0x366 <__udivmodsi4>
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	30 40       	sbci	r19, 0x00	; 0
 1f6:	34 c0       	rjmp	.+104    	; 0x260 <usart_init+0xd2>
	}
	else
	{
		UBRR_VALUE = (u16)((F_CPU + usart_init_config.Baud*8UL)/(usart_init_config.Baud*16UL) - 1UL);
 1f8:	80 91 60 00 	lds	r24, 0x0060
 1fc:	90 91 61 00 	lds	r25, 0x0061
 200:	a0 91 62 00 	lds	r26, 0x0062
 204:	b0 91 63 00 	lds	r27, 0x0063
 208:	ac 01       	movw	r20, r24
 20a:	bd 01       	movw	r22, r26
 20c:	40 5c       	subi	r20, 0xC0	; 192
 20e:	5d 4b       	sbci	r21, 0xBD	; 189
 210:	60 4f       	sbci	r22, 0xF0	; 240
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	6a 01       	movw	r12, r20
 216:	7b 01       	movw	r14, r22
 218:	cc 0c       	add	r12, r12
 21a:	dd 1c       	adc	r13, r13
 21c:	ee 1c       	adc	r14, r14
 21e:	ff 1c       	adc	r15, r15
 220:	cc 0c       	add	r12, r12
 222:	dd 1c       	adc	r13, r13
 224:	ee 1c       	adc	r14, r14
 226:	ff 1c       	adc	r15, r15
 228:	cc 0c       	add	r12, r12
 22a:	dd 1c       	adc	r13, r13
 22c:	ee 1c       	adc	r14, r14
 22e:	ff 1c       	adc	r15, r15
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	aa 1f       	adc	r26, r26
 236:	bb 1f       	adc	r27, r27
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	aa 1f       	adc	r26, r26
 23e:	bb 1f       	adc	r27, r27
 240:	9c 01       	movw	r18, r24
 242:	ad 01       	movw	r20, r26
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	44 1f       	adc	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	44 1f       	adc	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	c7 01       	movw	r24, r14
 256:	b6 01       	movw	r22, r12
 258:	0e 94 b3 01 	call	0x366	; 0x366 <__udivmodsi4>
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
	}
	
	UCSRC_REG = UBRR_SELECT;
 260:	10 bc       	out	0x20, r1	; 32
	UBRRL_REG = UBRR_VALUE;	
 262:	29 b9       	out	0x09, r18	; 9
	UBRRH_REG = UBRR_VALUE >> 8;
 264:	30 bd       	out	0x20, r19	; 32
	
	uart_enable();
 266:	0e 94 a2 01 	call	0x344	; 0x344 <uart_enable>
	
	UCSRC_REG = UCSRC_SELECT;
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	80 bd       	out	0x20, r24	; 32
	UCSRC_REG |= usart_init_config.DataBits | usart_init_config.StopBits | usart_init_config.Parity;
 26e:	90 b5       	in	r25, 0x20	; 32
 270:	80 91 64 00 	lds	r24, 0x0064
 274:	89 2b       	or	r24, r25
 276:	90 91 65 00 	lds	r25, 0x0065
 27a:	89 2b       	or	r24, r25
 27c:	90 91 66 00 	lds	r25, 0x0066
 280:	89 2b       	or	r24, r25
 282:	80 bd       	out	0x20, r24	; 32
	
	UCSRA_REG |= usart_init_config.U2X_State;
 284:	9b b1       	in	r25, 0x0b	; 11
 286:	80 91 68 00 	lds	r24, 0x0068
 28a:	89 2b       	or	r24, r25
 28c:	8b b9       	out	0x0b, r24	; 11
	
	if(usart_init_config.EnableInterrupt)
 28e:	80 91 67 00 	lds	r24, 0x0067
 292:	88 23       	and	r24, r24
 294:	21 f0       	breq	.+8      	; 0x29e <usart_init+0x110>
	{
		cli();
 296:	f8 94       	cli
		uart_enable_interrupt_rx();
 298:	0e 94 b1 01 	call	0x362	; 0x362 <uart_enable_interrupt_rx>
		sei();
 29c:	78 94       	sei
	}		
}
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	08 95       	ret

000002a8 <usart_transmit>:

void usart_transmit(unsigned char x)
{
	while (!(UCSRA_REG & UDR_ENABLE));	/*wait until the transmit buffer is empty and ready to be written*/
 2a8:	5d 9b       	sbis	0x0b, 5	; 11
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <usart_transmit>
	UDR_REG = x;	//put data into the buffer
 2ac:	8c b9       	out	0x0c, r24	; 12
}
 2ae:	08 95       	ret

000002b0 <usart_receive>:

unsigned char usart_receive(void)
{
	while (!(UCSRA_REG & RXC_RECEIVE_COMPLETE));
 2b0:	5f 9b       	sbis	0x0b, 7	; 11
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <usart_receive>
	return UDR;
 2b4:	8c b1       	in	r24, 0x0c	; 12
}
 2b6:	08 95       	ret

000002b8 <__vector_13>:

 ISR(USART_RXC_vect)
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	0f 92       	push	r0
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char value;
	value = UDR_REG;
 2e4:	8c b1       	in	r24, 0x0c	; 12
 2e6:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePort(PC, value, 0xFF);
 2e8:	69 81       	ldd	r22, Y+1	; 0x01
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	4f ef       	ldi	r20, 0xFF	; 255
 2ee:	0e 94 7a 00 	call	0xf4	; 0xf4 <DIO_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	90 e7       	ldi	r25, 0x70	; 112
 2f6:	a2 e0       	ldi	r26, 0x02	; 2
 2f8:	81 50       	subi	r24, 0x01	; 1
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	a0 40       	sbci	r26, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <__vector_13+0x40>
 300:	00 c0       	rjmp	.+0      	; 0x302 <__vector_13+0x4a>
 302:	00 00       	nop
	_delay_ms(100);
	usart_transmit(value);
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	0e 94 54 01 	call	0x2a8	; 0x2a8 <usart_transmit>
}
 30a:	0f 90       	pop	r0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <uart_disable>:
};

void uart_disable()
{
	/*disable UART receiver and transmitter*/
	UCSRB_REG &= (0<<RXEN) | (0<<TXEN);	
 332:	8a b1       	in	r24, 0x0a	; 10
 334:	1a b8       	out	0x0a, r1	; 10
}
 336:	08 95       	ret

00000338 <uart_disable_rx>:

void uart_disable_rx()
{
	/*disable UART receiver*/
	UCSRB_REG &= (0<<RXEN);	
 338:	8a b1       	in	r24, 0x0a	; 10
 33a:	1a b8       	out	0x0a, r1	; 10
}
 33c:	08 95       	ret

0000033e <uart_disable_tx>:

void uart_disable_tx()
{
	/*disable UART transmitter*/
	UCSRB_REG &= (0<<TXEN);	
 33e:	8a b1       	in	r24, 0x0a	; 10
 340:	1a b8       	out	0x0a, r1	; 10
}
 342:	08 95       	ret

00000344 <uart_enable>:
/*********************************/

void uart_enable()
{
	/*enable UART receiver and transmitter*/
	UCSRB_REG |= (1<<RXEN) | (1<<TXEN);	
 344:	8a b1       	in	r24, 0x0a	; 10
 346:	88 61       	ori	r24, 0x18	; 24
 348:	8a b9       	out	0x0a, r24	; 10
}
 34a:	08 95       	ret

0000034c <uart_enable_rx>:

void uart_enable_rx()
{
	/*enable UART receiver*/
	UCSRB_REG |= (1<<RXEN);	
 34c:	54 9a       	sbi	0x0a, 4	; 10
}
 34e:	08 95       	ret

00000350 <uart_enable_tx>:

void uart_enable_tx()
{
	/*enable UART transmitter*/
	UCSRB_REG |= (1<<TXEN);	
 350:	53 9a       	sbi	0x0a, 3	; 10
}
 352:	08 95       	ret

00000354 <uart_disable_interrupt>:
/**********************************/

void uart_disable_interrupt()
{
	/*disable UART interrupts*/
	UCSRB_REG &= (0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE);
 354:	8a b1       	in	r24, 0x0a	; 10
 356:	1a b8       	out	0x0a, r1	; 10
}
 358:	08 95       	ret

0000035a <uart_enable_interrupt>:

void uart_enable_interrupt()
{
	/*enable UART interrupts*/
	UCSRB_REG |= (1<<RXCIE) | (1<<TXCIE) | (1<<UDRIE);
 35a:	8a b1       	in	r24, 0x0a	; 10
 35c:	80 6e       	ori	r24, 0xE0	; 224
 35e:	8a b9       	out	0x0a, r24	; 10
}
 360:	08 95       	ret

00000362 <uart_enable_interrupt_rx>:

void uart_enable_interrupt_rx()
{
	UCSRB_REG |= (1<<RXCIE);
 362:	57 9a       	sbi	0x0a, 7	; 10
}
 364:	08 95       	ret

00000366 <__udivmodsi4>:
 366:	a1 e2       	ldi	r26, 0x21	; 33
 368:	1a 2e       	mov	r1, r26
 36a:	aa 1b       	sub	r26, r26
 36c:	bb 1b       	sub	r27, r27
 36e:	fd 01       	movw	r30, r26
 370:	0d c0       	rjmp	.+26     	; 0x38c <__udivmodsi4_ep>

00000372 <__udivmodsi4_loop>:
 372:	aa 1f       	adc	r26, r26
 374:	bb 1f       	adc	r27, r27
 376:	ee 1f       	adc	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	a2 17       	cp	r26, r18
 37c:	b3 07       	cpc	r27, r19
 37e:	e4 07       	cpc	r30, r20
 380:	f5 07       	cpc	r31, r21
 382:	20 f0       	brcs	.+8      	; 0x38c <__udivmodsi4_ep>
 384:	a2 1b       	sub	r26, r18
 386:	b3 0b       	sbc	r27, r19
 388:	e4 0b       	sbc	r30, r20
 38a:	f5 0b       	sbc	r31, r21

0000038c <__udivmodsi4_ep>:
 38c:	66 1f       	adc	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	1a 94       	dec	r1
 396:	69 f7       	brne	.-38     	; 0x372 <__udivmodsi4_loop>
 398:	60 95       	com	r22
 39a:	70 95       	com	r23
 39c:	80 95       	com	r24
 39e:	90 95       	com	r25
 3a0:	9b 01       	movw	r18, r22
 3a2:	ac 01       	movw	r20, r24
 3a4:	bd 01       	movw	r22, r26
 3a6:	cf 01       	movw	r24, r30
 3a8:	08 95       	ret

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>

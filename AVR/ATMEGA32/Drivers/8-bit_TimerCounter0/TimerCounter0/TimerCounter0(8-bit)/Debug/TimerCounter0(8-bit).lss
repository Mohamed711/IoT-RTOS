
TimerCounter0(8-bit).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000030c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b8  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ec  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000409  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022b  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ce  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 22 01 	call	0x244	; 0x244 <main>
  8a:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerCounter0_Init>:
	{
		TCNT0 &= 0x83;		
	}
	else if ((WGM01_VALUE==1) && (WGM00_VALUE==0)) //CTC
	{
		TCNT0 &=0x00;
  92:	82 b7       	in	r24, 0x32	; 50
  94:	12 be       	out	0x32, r1	; 50
		OCR0 = 0x3E;	
  96:	8e e3       	ldi	r24, 0x3E	; 62
  98:	8c bf       	out	0x3c, r24	; 60
	}
	TCCR0 = (CS00_VALUE<<CS00)|(CS01_VALUE<<CS01)|(CS02_VALUE<<CS02)|(WGM01_VALUE<<WGM01)|(WGM00_VALUE<<WGM00)|(COM00_VALUE<<COM00)|(COM01_VALUE<<COM01);
  9a:	8a e0       	ldi	r24, 0x0A	; 10
  9c:	83 bf       	out	0x33, r24	; 51
	GPIO_InitPortDirection(PB, 0xFF,0xFF);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	6f ef       	ldi	r22, 0xFF	; 255
  a2:	4f ef       	ldi	r20, 0xFF	; 255
  a4:	0e 94 a9 00 	call	0x152	; 0x152 <GPIO_InitPortDirection>
}
  a8:	08 95       	ret

000000aa <TimerCounter0_Read>:

uint8_t TimerCounter0_Read()
{
	return TCNT0;
  aa:	82 b7       	in	r24, 0x32	; 50
}
  ac:	08 95       	ret

000000ae <delay_NORMAL_milli>:

void delay_NORMAL_milli (int t)
{	
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	8c 01       	movw	r16, r24
	TimerCounter0_Init();
  ba:	0e 94 49 00 	call	0x92	; 0x92 <TimerCounter0_Init>
	for (int i=0 ; i<t ; i++)
  be:	10 16       	cp	r1, r16
  c0:	11 06       	cpc	r1, r17
  c2:	c4 f4       	brge	.+48     	; 0xf4 <delay_NORMAL_milli+0x46>
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		TCNT0=0x83;
  c8:	0f 2e       	mov	r0, r31
  ca:	f3 e8       	ldi	r31, 0x83	; 131
  cc:	ff 2e       	mov	r15, r31
  ce:	f0 2d       	mov	r31, r0
  d0:	f2 be       	out	0x32, r15	; 50
		//TimerCounter0_Init();
		while((TIFR&0x01)==0)
  d2:	08 b6       	in	r0, 0x38	; 56
  d4:	00 fc       	sbrc	r0, 0
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <delay_NORMAL_milli+0x3a>
			{GPIO_WritePort(PB, TCNT0, 0xFF);}
  d8:	62 b7       	in	r22, 0x32	; 50
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GPIO_WritePort>
	TimerCounter0_Init();
	for (int i=0 ; i<t ; i++)
	{
		TCNT0=0x83;
		//TimerCounter0_Init();
		while((TIFR&0x01)==0)
  e2:	08 b6       	in	r0, 0x38	; 56
  e4:	00 fe       	sbrs	r0, 0
  e6:	f8 cf       	rjmp	.-16     	; 0xd8 <delay_NORMAL_milli+0x2a>
			{GPIO_WritePort(PB, TCNT0, 0xFF);}
		//TCCR0=0;
		//TCNT0=0x00;
		TIFR = 0x01;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	88 bf       	out	0x38, r24	; 56
}

void delay_NORMAL_milli (int t)
{	
	TimerCounter0_Init();
	for (int i=0 ; i<t ; i++)
  ec:	21 96       	adiw	r28, 0x01	; 1
  ee:	c0 17       	cp	r28, r16
  f0:	d1 07       	cpc	r29, r17
  f2:	71 f7       	brne	.-36     	; 0xd0 <delay_NORMAL_milli+0x22>
			{GPIO_WritePort(PB, TCNT0, 0xFF);}
		//TCCR0=0;
		//TCNT0=0x00;
		TIFR = 0x01;
	}
	TCCR0=0x00;
  f4:	13 be       	out	0x33, r1	; 51
	
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	08 95       	ret

00000102 <delay_CTC_milli>:

void delay_CTC_milli (int t)
{
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	8c 01       	movw	r16, r24
	TimerCounter0_Init();
 10e:	0e 94 49 00 	call	0x92	; 0x92 <TimerCounter0_Init>
	for (int i=0 ; i<t ; i++)
 112:	10 16       	cp	r1, r16
 114:	11 06       	cpc	r1, r17
 116:	b4 f4       	brge	.+44     	; 0x144 <delay_CTC_milli+0x42>
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
		TCNT0=0x00;
		while((TIFR&0x02)==0)
			{GPIO_WritePort(PB, TCNT0, 0xFF);}
		//TCCR0=0;
		//TCNT0=0x00;
		TIFR = 0x02;
 11c:	ff 24       	eor	r15, r15
 11e:	68 94       	set
 120:	f1 f8       	bld	r15, 1
void delay_CTC_milli (int t)
{
	TimerCounter0_Init();
	for (int i=0 ; i<t ; i++)
	{
		TCNT0=0x00;
 122:	12 be       	out	0x32, r1	; 50
		while((TIFR&0x02)==0)
 124:	08 b6       	in	r0, 0x38	; 56
 126:	01 fc       	sbrc	r0, 1
 128:	08 c0       	rjmp	.+16     	; 0x13a <delay_CTC_milli+0x38>
			{GPIO_WritePort(PB, TCNT0, 0xFF);}
 12a:	62 b7       	in	r22, 0x32	; 50
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	4f ef       	ldi	r20, 0xFF	; 255
 130:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GPIO_WritePort>
{
	TimerCounter0_Init();
	for (int i=0 ; i<t ; i++)
	{
		TCNT0=0x00;
		while((TIFR&0x02)==0)
 134:	08 b6       	in	r0, 0x38	; 56
 136:	01 fe       	sbrs	r0, 1
 138:	f8 cf       	rjmp	.-16     	; 0x12a <delay_CTC_milli+0x28>
			{GPIO_WritePort(PB, TCNT0, 0xFF);}
		//TCCR0=0;
		//TCNT0=0x00;
		TIFR = 0x02;
 13a:	f8 be       	out	0x38, r15	; 56
}

void delay_CTC_milli (int t)
{
	TimerCounter0_Init();
	for (int i=0 ; i<t ; i++)
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	c0 17       	cp	r28, r16
 140:	d1 07       	cpc	r29, r17
 142:	79 f7       	brne	.-34     	; 0x122 <delay_CTC_milli+0x20>
			{GPIO_WritePort(PB, TCNT0, 0xFF);}
		//TCCR0=0;
		//TCNT0=0x00;
		TIFR = 0x02;
	}
	TCCR0=0x00;
 144:	13 be       	out	0x33, r1	; 51
	
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	08 95       	ret

00000152 <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	89 f0       	breq	.+34     	; 0x178 <GPIO_InitPortDirection+0x26>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	28 f0       	brcs	.+10     	; 0x164 <GPIO_InitPortDirection+0x12>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	b9 f0       	breq	.+46     	; 0x18c <GPIO_InitPortDirection+0x3a>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	41 f5       	brne	.+80     	; 0x1b2 <GPIO_InitPortDirection+0x60>
 162:	1e c0       	rjmp	.+60     	; 0x1a0 <GPIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
 164:	8a b3       	in	r24, 0x1a	; 26
 166:	94 2f       	mov	r25, r20
 168:	90 95       	com	r25
 16a:	89 23       	and	r24, r25
 16c:	8a bb       	out	0x1a, r24	; 26
 16e:	8a b3       	in	r24, 0x1a	; 26
 170:	64 23       	and	r22, r20
 172:	68 2b       	or	r22, r24
 174:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 176:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
 178:	87 b3       	in	r24, 0x17	; 23
 17a:	94 2f       	mov	r25, r20
 17c:	90 95       	com	r25
 17e:	89 23       	and	r24, r25
 180:	87 bb       	out	0x17, r24	; 23
 182:	87 b3       	in	r24, 0x17	; 23
 184:	64 23       	and	r22, r20
 186:	68 2b       	or	r22, r24
 188:	67 bb       	out	0x17, r22	; 23
		}
		break;
 18a:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
 18c:	84 b3       	in	r24, 0x14	; 20
 18e:	94 2f       	mov	r25, r20
 190:	90 95       	com	r25
 192:	89 23       	and	r24, r25
 194:	84 bb       	out	0x14, r24	; 20
 196:	84 b3       	in	r24, 0x14	; 20
 198:	64 23       	and	r22, r20
 19a:	68 2b       	or	r22, r24
 19c:	64 bb       	out	0x14, r22	; 20
		}
		break;
 19e:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 1a0:	81 b3       	in	r24, 0x11	; 17
 1a2:	94 2f       	mov	r25, r20
 1a4:	90 95       	com	r25
 1a6:	89 23       	and	r24, r25
 1a8:	81 bb       	out	0x11, r24	; 17
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	64 23       	and	r22, r20
 1ae:	68 2b       	or	r22, r24
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <GPIO_WritePort>:
		break;
	}	
}
void GPIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	switch(PortName)
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	89 f0       	breq	.+34     	; 0x1da <GPIO_WritePort+0x26>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	28 f0       	brcs	.+10     	; 0x1c6 <GPIO_WritePort+0x12>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	b9 f0       	breq	.+46     	; 0x1ee <GPIO_WritePort+0x3a>
 1c0:	83 30       	cpi	r24, 0x03	; 3
 1c2:	41 f5       	brne	.+80     	; 0x214 <GPIO_WritePort+0x60>
 1c4:	1e c0       	rjmp	.+60     	; 0x202 <GPIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 1c6:	8b b3       	in	r24, 0x1b	; 27
 1c8:	94 2f       	mov	r25, r20
 1ca:	90 95       	com	r25
 1cc:	89 23       	and	r24, r25
 1ce:	8b bb       	out	0x1b, r24	; 27
 1d0:	8b b3       	in	r24, 0x1b	; 27
 1d2:	64 23       	and	r22, r20
 1d4:	68 2b       	or	r22, r24
 1d6:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 1d8:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	94 2f       	mov	r25, r20
 1de:	90 95       	com	r25
 1e0:	89 23       	and	r24, r25
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	88 b3       	in	r24, 0x18	; 24
 1e6:	64 23       	and	r22, r20
 1e8:	68 2b       	or	r22, r24
 1ea:	68 bb       	out	0x18, r22	; 24
		}
		break;
 1ec:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	94 2f       	mov	r25, r20
 1f2:	90 95       	com	r25
 1f4:	89 23       	and	r24, r25
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	85 b3       	in	r24, 0x15	; 21
 1fa:	64 23       	and	r22, r20
 1fc:	68 2b       	or	r22, r24
 1fe:	65 bb       	out	0x15, r22	; 21
		}
		break;
 200:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 202:	82 b3       	in	r24, 0x12	; 18
 204:	94 2f       	mov	r25, r20
 206:	90 95       	com	r25
 208:	89 23       	and	r24, r25
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	82 b3       	in	r24, 0x12	; 18
 20e:	64 23       	and	r22, r20
 210:	68 2b       	or	r22, r24
 212:	62 bb       	out	0x12, r22	; 18
 214:	08 95       	ret

00000216 <GPIO_ReadPort>:
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
	switch(PortName)
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	51 f0       	breq	.+20     	; 0x22e <GPIO_ReadPort+0x18>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	28 f0       	brcs	.+10     	; 0x228 <GPIO_ReadPort+0x12>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	49 f0       	breq	.+18     	; 0x234 <GPIO_ReadPort+0x1e>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	69 f4       	brne	.+26     	; 0x240 <GPIO_ReadPort+0x2a>
 226:	09 c0       	rjmp	.+18     	; 0x23a <GPIO_ReadPort+0x24>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMask);
 228:	89 b3       	in	r24, 0x19	; 25
 22a:	86 23       	and	r24, r22
		}
		break;
 22c:	08 95       	ret
		case PB:
		{
			Data = READ_REG(PINB,PortMask);
 22e:	86 b3       	in	r24, 0x16	; 22
 230:	86 23       	and	r24, r22
		}
		break;
 232:	08 95       	ret
		case PC:
		{
			Data = READ_REG(PINC,PortMask);
 234:	83 b3       	in	r24, 0x13	; 19
 236:	86 23       	and	r24, r22
		}
		break;
 238:	08 95       	ret
		case PD:
		{
			Data = READ_REG(PIND,PortMask);
 23a:	80 b3       	in	r24, 0x10	; 16
 23c:	86 23       	and	r24, r22
		}
		break;
 23e:	08 95       	ret
		break;
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
 240:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
	}
	return Data;
	
 242:	08 95       	ret

00000244 <main>:

#include <avr/io.h>
#include "GPIO.h"
int main(void)
{
	GPIO_InitPortDirection(PD,0xFF,0x01);
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	6f ef       	ldi	r22, 0xFF	; 255
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	0e 94 a9 00 	call	0x152	; 0x152 <GPIO_InitPortDirection>
    while(1)
    {	
		GPIO_WritePort(PD,0x01,0x01); 
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GPIO_WritePort>
		delay_CTC_milli(100);
 258:	84 e6       	ldi	r24, 0x64	; 100
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 81 00 	call	0x102	; 0x102 <delay_CTC_milli>
		
		GPIO_WritePort(PD,0x00,0x01);
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GPIO_WritePort>
		delay_CTC_milli(100);
 26a:	84 e6       	ldi	r24, 0x64	; 100
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 81 00 	call	0x102	; 0x102 <delay_CTC_milli>
 272:	ed cf       	rjmp	.-38     	; 0x24e <main+0xa>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>

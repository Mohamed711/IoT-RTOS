
TimerCounter0(8-bit).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000284  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000009d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000583  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e5  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f5  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001d5  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018a  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  8a:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerCounter0_Init>:
	//OCR0 = 0xFF;		
	
	if((WGM01_VALUE==0) && (WGM00_VALUE==0))
	{
		//TIMSK|=(1<<TOIE0);
		TCNT0 &= 0x00;		
  92:	82 b7       	in	r24, 0x32	; 50
  94:	12 be       	out	0x32, r1	; 50
	}
	TCCR0 = (CS00_VALUE<<CS00)|(CS01_VALUE<<CS01)|(CS02_VALUE<<CS02)|(WGM01_VALUE<<WGM01)|(WGM00_VALUE<<WGM00)|(COM00_VALUE<<COM00)|(COM01_VALUE<<COM01);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	83 bf       	out	0x33, r24	; 51
	GPIO_InitPortDirection(PB, 0xFF,0xFF);
  9a:	6f ef       	ldi	r22, 0xFF	; 255
  9c:	4f ef       	ldi	r20, 0xFF	; 255
  9e:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_InitPortDirection>
	
}
  a2:	08 95       	ret

000000a4 <TimerCounter0_milliTime_NORMAL>:


void TimerCounter0_milliTime_NORMAL (uint8_t t)
{
	time = t;
  a4:	80 93 60 00 	sts	0x0060, r24
}	
  a8:	08 95       	ret

000000aa <TimerCounter0_Read>:

uint8_t TimerCounter0_Read()
{
	return TCNT0;
  aa:	82 b7       	in	r24, 0x32	; 50
}
  ac:	08 95       	ret

000000ae <delay_NORMAL>:

void delay_NORMAL (void)
{
	
	TimerCounter0_Init();
  ae:	0e 94 49 00 	call	0x92	; 0x92 <TimerCounter0_Init>
	while((TIFR&0x01)==0)
  b2:	08 b6       	in	r0, 0x38	; 56
  b4:	00 fc       	sbrc	r0, 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <delay_NORMAL+0x1a>
		{GPIO_WritePort(PB, TCNT0, 0xFF);}
  b8:	62 b7       	in	r22, 0x32	; 50
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	4f ef       	ldi	r20, 0xFF	; 255
  be:	0e 94 9a 00 	call	0x134	; 0x134 <GPIO_WritePort>

void delay_NORMAL (void)
{
	
	TimerCounter0_Init();
	while((TIFR&0x01)==0)
  c2:	08 b6       	in	r0, 0x38	; 56
  c4:	00 fe       	sbrs	r0, 0
  c6:	f8 cf       	rjmp	.-16     	; 0xb8 <delay_NORMAL+0xa>
		{GPIO_WritePort(PB, TCNT0, 0xFF);}
	TCCR0=0;
  c8:	13 be       	out	0x33, r1	; 51
	TCNT0=0x00;
  ca:	12 be       	out	0x32, r1	; 50
	TIFR = 0x01;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	88 bf       	out	0x38, r24	; 56
  d0:	08 95       	ret

000000d2 <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	89 f0       	breq	.+34     	; 0xf8 <GPIO_InitPortDirection+0x26>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	28 f0       	brcs	.+10     	; 0xe4 <GPIO_InitPortDirection+0x12>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	b9 f0       	breq	.+46     	; 0x10c <GPIO_InitPortDirection+0x3a>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	41 f5       	brne	.+80     	; 0x132 <GPIO_InitPortDirection+0x60>
  e2:	1e c0       	rjmp	.+60     	; 0x120 <GPIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  e4:	8a b3       	in	r24, 0x1a	; 26
  e6:	94 2f       	mov	r25, r20
  e8:	90 95       	com	r25
  ea:	89 23       	and	r24, r25
  ec:	8a bb       	out	0x1a, r24	; 26
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	64 23       	and	r22, r20
  f2:	68 2b       	or	r22, r24
  f4:	6a bb       	out	0x1a, r22	; 26
		}
		break;
  f6:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	94 2f       	mov	r25, r20
  fc:	90 95       	com	r25
  fe:	89 23       	and	r24, r25
 100:	87 bb       	out	0x17, r24	; 23
 102:	87 b3       	in	r24, 0x17	; 23
 104:	64 23       	and	r22, r20
 106:	68 2b       	or	r22, r24
 108:	67 bb       	out	0x17, r22	; 23
		}
		break;
 10a:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
 10c:	84 b3       	in	r24, 0x14	; 20
 10e:	94 2f       	mov	r25, r20
 110:	90 95       	com	r25
 112:	89 23       	and	r24, r25
 114:	84 bb       	out	0x14, r24	; 20
 116:	84 b3       	in	r24, 0x14	; 20
 118:	64 23       	and	r22, r20
 11a:	68 2b       	or	r22, r24
 11c:	64 bb       	out	0x14, r22	; 20
		}
		break;
 11e:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 120:	81 b3       	in	r24, 0x11	; 17
 122:	94 2f       	mov	r25, r20
 124:	90 95       	com	r25
 126:	89 23       	and	r24, r25
 128:	81 bb       	out	0x11, r24	; 17
 12a:	81 b3       	in	r24, 0x11	; 17
 12c:	64 23       	and	r22, r20
 12e:	68 2b       	or	r22, r24
 130:	61 bb       	out	0x11, r22	; 17
 132:	08 95       	ret

00000134 <GPIO_WritePort>:
		break;
	}	
}
void GPIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	switch(PortName)
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	89 f0       	breq	.+34     	; 0x15a <GPIO_WritePort+0x26>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	28 f0       	brcs	.+10     	; 0x146 <GPIO_WritePort+0x12>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	b9 f0       	breq	.+46     	; 0x16e <GPIO_WritePort+0x3a>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	41 f5       	brne	.+80     	; 0x194 <GPIO_WritePort+0x60>
 144:	1e c0       	rjmp	.+60     	; 0x182 <GPIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	94 2f       	mov	r25, r20
 14a:	90 95       	com	r25
 14c:	89 23       	and	r24, r25
 14e:	8b bb       	out	0x1b, r24	; 27
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	64 23       	and	r22, r20
 154:	68 2b       	or	r22, r24
 156:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 158:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 15a:	88 b3       	in	r24, 0x18	; 24
 15c:	94 2f       	mov	r25, r20
 15e:	90 95       	com	r25
 160:	89 23       	and	r24, r25
 162:	88 bb       	out	0x18, r24	; 24
 164:	88 b3       	in	r24, 0x18	; 24
 166:	64 23       	and	r22, r20
 168:	68 2b       	or	r22, r24
 16a:	68 bb       	out	0x18, r22	; 24
		}
		break;
 16c:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	94 2f       	mov	r25, r20
 172:	90 95       	com	r25
 174:	89 23       	and	r24, r25
 176:	85 bb       	out	0x15, r24	; 21
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	64 23       	and	r22, r20
 17c:	68 2b       	or	r22, r24
 17e:	65 bb       	out	0x15, r22	; 21
		}
		break;
 180:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 182:	82 b3       	in	r24, 0x12	; 18
 184:	94 2f       	mov	r25, r20
 186:	90 95       	com	r25
 188:	89 23       	and	r24, r25
 18a:	82 bb       	out	0x12, r24	; 18
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	64 23       	and	r22, r20
 190:	68 2b       	or	r22, r24
 192:	62 bb       	out	0x12, r22	; 18
 194:	08 95       	ret

00000196 <GPIO_ReadPort>:
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
	switch(PortName)
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	51 f0       	breq	.+20     	; 0x1ae <GPIO_ReadPort+0x18>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <GPIO_ReadPort+0x12>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	49 f0       	breq	.+18     	; 0x1b4 <GPIO_ReadPort+0x1e>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	69 f4       	brne	.+26     	; 0x1c0 <GPIO_ReadPort+0x2a>
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <GPIO_ReadPort+0x24>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMask);
 1a8:	89 b3       	in	r24, 0x19	; 25
 1aa:	86 23       	and	r24, r22
		}
		break;
 1ac:	08 95       	ret
		case PB:
		{
			Data = READ_REG(PINB,PortMask);
 1ae:	86 b3       	in	r24, 0x16	; 22
 1b0:	86 23       	and	r24, r22
		}
		break;
 1b2:	08 95       	ret
		case PC:
		{
			Data = READ_REG(PINC,PortMask);
 1b4:	83 b3       	in	r24, 0x13	; 19
 1b6:	86 23       	and	r24, r22
		}
		break;
 1b8:	08 95       	ret
		case PD:
		{
			Data = READ_REG(PIND,PortMask);
 1ba:	80 b3       	in	r24, 0x10	; 16
 1bc:	86 23       	and	r24, r22
		}
		break;
 1be:	08 95       	ret
		break;
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
	}
	return Data;
	
 1c2:	08 95       	ret

000001c4 <main>:

#include <avr/io.h>
#include "GPIO.h"
int main(void)
{
	GPIO_InitPortDirection(PD,0xFF,0x01);
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	6f ef       	ldi	r22, 0xFF	; 255
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_InitPortDirection>
    while(1)
    {	
		GPIO_WritePort(PD,0x01,0x01); 
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	0e 94 9a 00 	call	0x134	; 0x134 <GPIO_WritePort>
		delay_NORMAL();
 1d8:	0e 94 57 00 	call	0xae	; 0xae <delay_NORMAL>
		
		GPIO_WritePort(PD,0x00,0x01);
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 9a 00 	call	0x134	; 0x134 <GPIO_WritePort>
		delay_NORMAL();
 1e6:	0e 94 57 00 	call	0xae	; 0xae <delay_NORMAL>
 1ea:	f1 cf       	rjmp	.-30     	; 0x1ce <main+0xa>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>


TimerCounter0(8-bit).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000002da  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cb  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b7  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bb  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b4  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000278  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_10>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8a:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerInit>:



void TimerInit (void)
{		
	TCCR0 |= (((MODE.MODE_NORMAL_CTC & 0x02)>>1)<<WGM01) | ((MODE.MODE_NORMAL_CTC & 0x01)<<WGM00) | (COM00_VALUE<<COM00)|(COM01_VALUE<<COM01);
  92:	63 b7       	in	r22, 0x33	; 51
  94:	80 91 60 00 	lds	r24, 0x0060
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	ac 01       	movw	r20, r24
  9c:	41 70       	andi	r20, 0x01	; 1
  9e:	50 70       	andi	r21, 0x00	; 0
  a0:	9a 01       	movw	r18, r20
  a2:	00 24       	eor	r0, r0
  a4:	36 95       	lsr	r19
  a6:	27 95       	ror	r18
  a8:	07 94       	ror	r0
  aa:	36 95       	lsr	r19
  ac:	27 95       	ror	r18
  ae:	07 94       	ror	r0
  b0:	32 2f       	mov	r19, r18
  b2:	20 2d       	mov	r18, r0
  b4:	46 2f       	mov	r20, r22
  b6:	42 2b       	or	r20, r18
  b8:	82 70       	andi	r24, 0x02	; 2
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	9c 01       	movw	r18, r24
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
  c2:	c9 01       	movw	r24, r18
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	84 2b       	or	r24, r20
  d2:	83 bf       	out	0x33, r24	; 51
}
  d4:	08 95       	ret

000000d6 <timer0_Read>:

uint8_t timer0_Read()
{
	return TCNT0;
  d6:	82 b7       	in	r24, 0x32	; 50
}
  d8:	08 95       	ret

000000da <delay1ms>:

void delay1ms(u16 delay)
{
  da:	9c 01       	movw	r18, r24
	u8 u8LoopCounter;
	u16 x;

	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
	{
		x = clk1ms[u8LoopCounter].TempFreq;
  dc:	40 91 61 00 	lds	r20, 0x0061
  e0:	50 91 62 00 	lds	r21, 0x0062
		
		if (x < 256)
  e4:	4f 3f       	cpi	r20, 0xFF	; 255
  e6:	51 05       	cpc	r21, r1
  e8:	69 f0       	breq	.+26     	; 0x104 <delay1ms+0x2a>
  ea:	60 f0       	brcs	.+24     	; 0x104 <delay1ms+0x2a>
  ec:	e6 e6       	ldi	r30, 0x66	; 102
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
	u8 u8LoopCounter;
	u16 x;

	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
	{
		x = clk1ms[u8LoopCounter].TempFreq;
  f4:	bc 01       	movw	r22, r24
  f6:	40 81       	ld	r20, Z
  f8:	51 81       	ldd	r21, Z+1	; 0x01
		
		if (x < 256)
  fa:	4f 3f       	cpi	r20, 0xFF	; 255
  fc:	51 05       	cpc	r21, r1
  fe:	09 f0       	breq	.+2      	; 0x102 <delay1ms+0x28>
 100:	98 f4       	brcc	.+38     	; 0x128 <delay1ms+0x4e>
 102:	02 c0       	rjmp	.+4      	; 0x108 <delay1ms+0x2e>
	u8 u8LoopCounter;
	u16 x;

	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
	{
		x = clk1ms[u8LoopCounter].TempFreq;
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
		
		if (x < 256)
		{
			TCCR0 |= ((clk1ms[u8LoopCounter].RegVal) &0x07);
 108:	a3 b7       	in	r26, 0x33	; 51
 10a:	cb 01       	movw	r24, r22
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	86 0f       	add	r24, r22
 116:	97 1f       	adc	r25, r23
 118:	fc 01       	movw	r30, r24
 11a:	ef 59       	subi	r30, 0x9F	; 159
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	84 81       	ldd	r24, Z+4	; 0x04
 120:	87 70       	andi	r24, 0x07	; 7
 122:	8a 2b       	or	r24, r26
 124:	83 bf       	out	0x33, r24	; 51
			break;
 126:	05 c0       	rjmp	.+10     	; 0x132 <delay1ms+0x58>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	35 96       	adiw	r30, 0x05	; 5
void delay1ms(u16 delay)
{
	u8 u8LoopCounter;
	u16 x;

	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
 12c:	85 30       	cpi	r24, 0x05	; 5
 12e:	91 05       	cpc	r25, r1
 130:	09 f7       	brne	.-62     	; 0xf4 <delay1ms+0x1a>
		}
		
	}
	
	u16 i;
	for (i=0 ; i < delay ; i++)
 132:	21 15       	cp	r18, r1
 134:	31 05       	cpc	r19, r1
 136:	e9 f0       	breq	.+58     	; 0x172 <delay1ms+0x98>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(MODE.MODE_NORMAL_CTC == u8_MODE_NORMAL)
 13c:	50 91 60 00 	lds	r21, 0x0060
			TIFR = 0x01;
		}		
		else if (MODE.MODE_NORMAL_CTC == u8_MODE_CTC)
		{ 
			 TCNT0 = 0;
			 OCR0 = x-1;
 140:	e4 2f       	mov	r30, r20
 142:	e1 50       	subi	r30, 0x01	; 1
			 while ((TIFR&0x02)==0);
			 TIFR = 0x02;
 144:	72 e0       	ldi	r23, 0x02	; 2
	u16 i;
	for (i=0 ; i < delay ; i++)
	{
		if(MODE.MODE_NORMAL_CTC == u8_MODE_NORMAL)
		{
			TCNT0 = 256 - x;
 146:	41 95       	neg	r20
			while ((TIFR&0x01)==0);
			TIFR = 0x01;
 148:	61 e0       	ldi	r22, 0x01	; 1
	}
	
	u16 i;
	for (i=0 ; i < delay ; i++)
	{
		if(MODE.MODE_NORMAL_CTC == u8_MODE_NORMAL)
 14a:	55 23       	and	r21, r21
 14c:	31 f4       	brne	.+12     	; 0x15a <delay1ms+0x80>
		{
			TCNT0 = 256 - x;
 14e:	42 bf       	out	0x32, r20	; 50
			while ((TIFR&0x01)==0);
 150:	08 b6       	in	r0, 0x38	; 56
 152:	00 fe       	sbrs	r0, 0
 154:	fd cf       	rjmp	.-6      	; 0x150 <delay1ms+0x76>
			TIFR = 0x01;
 156:	68 bf       	out	0x38, r22	; 56
 158:	08 c0       	rjmp	.+16     	; 0x16a <delay1ms+0x90>
		}		
		else if (MODE.MODE_NORMAL_CTC == u8_MODE_CTC)
 15a:	52 30       	cpi	r21, 0x02	; 2
 15c:	31 f4       	brne	.+12     	; 0x16a <delay1ms+0x90>
		{ 
			 TCNT0 = 0;
 15e:	12 be       	out	0x32, r1	; 50
			 OCR0 = x-1;
 160:	ec bf       	out	0x3c, r30	; 60
			 while ((TIFR&0x02)==0);
 162:	08 b6       	in	r0, 0x38	; 56
 164:	01 fe       	sbrs	r0, 1
 166:	fd cf       	rjmp	.-6      	; 0x162 <delay1ms+0x88>
			 TIFR = 0x02;
 168:	78 bf       	out	0x38, r23	; 56
		}
		
	}
	
	u16 i;
	for (i=0 ; i < delay ; i++)
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	82 17       	cp	r24, r18
 16e:	93 07       	cpc	r25, r19
 170:	61 f7       	brne	.-40     	; 0x14a <delay1ms+0x70>
 172:	08 95       	ret

00000174 <timer0_readOVFFlag>:
}


u8 timer0_readOVFFlag()
{
	return (TIFR&0x01);
 174:	88 b7       	in	r24, 0x38	; 56
	//return GETBIT(TIFR,TOV0);
}
 176:	81 70       	andi	r24, 0x01	; 1
 178:	08 95       	ret

0000017a <timer0_readCMPFlag>:

u8 timer0_readCMPFlag()
{
	//return GETBIT(TIFR,OCF0);
	return (TIFR&0x02);
 17a:	88 b7       	in	r24, 0x38	; 56
}
 17c:	82 70       	andi	r24, 0x02	; 2
 17e:	08 95       	ret

00000180 <setTCNT0>:

void setTCNT0 (u8 TCNT0_value)
{
	TCNT0 = TCNT0_value;
 180:	82 bf       	out	0x32, r24	; 50
}
 182:	08 95       	ret

00000184 <setOCR0>:

void setOCR0 (u8 OCR0_value)
{
	OCR0 = OCR0_value;
 184:	8c bf       	out	0x3c, r24	; 60
}
 186:	08 95       	ret

00000188 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
	
}
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
	
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	89 f0       	breq	.+34     	; 0x1d6 <GPIO_InitPortDirection+0x26>
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	28 f0       	brcs	.+10     	; 0x1c2 <GPIO_InitPortDirection+0x12>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	b9 f0       	breq	.+46     	; 0x1ea <GPIO_InitPortDirection+0x3a>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	41 f5       	brne	.+80     	; 0x210 <GPIO_InitPortDirection+0x60>
 1c0:	1e c0       	rjmp	.+60     	; 0x1fe <GPIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
 1c2:	8a b3       	in	r24, 0x1a	; 26
 1c4:	94 2f       	mov	r25, r20
 1c6:	90 95       	com	r25
 1c8:	89 23       	and	r24, r25
 1ca:	8a bb       	out	0x1a, r24	; 26
 1cc:	8a b3       	in	r24, 0x1a	; 26
 1ce:	64 23       	and	r22, r20
 1d0:	68 2b       	or	r22, r24
 1d2:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 1d4:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
 1d6:	87 b3       	in	r24, 0x17	; 23
 1d8:	94 2f       	mov	r25, r20
 1da:	90 95       	com	r25
 1dc:	89 23       	and	r24, r25
 1de:	87 bb       	out	0x17, r24	; 23
 1e0:	87 b3       	in	r24, 0x17	; 23
 1e2:	64 23       	and	r22, r20
 1e4:	68 2b       	or	r22, r24
 1e6:	67 bb       	out	0x17, r22	; 23
		}
		break;
 1e8:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
 1ea:	84 b3       	in	r24, 0x14	; 20
 1ec:	94 2f       	mov	r25, r20
 1ee:	90 95       	com	r25
 1f0:	89 23       	and	r24, r25
 1f2:	84 bb       	out	0x14, r24	; 20
 1f4:	84 b3       	in	r24, 0x14	; 20
 1f6:	64 23       	and	r22, r20
 1f8:	68 2b       	or	r22, r24
 1fa:	64 bb       	out	0x14, r22	; 20
		}
		break;
 1fc:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 1fe:	81 b3       	in	r24, 0x11	; 17
 200:	94 2f       	mov	r25, r20
 202:	90 95       	com	r25
 204:	89 23       	and	r24, r25
 206:	81 bb       	out	0x11, r24	; 17
 208:	81 b3       	in	r24, 0x11	; 17
 20a:	64 23       	and	r22, r20
 20c:	68 2b       	or	r22, r24
 20e:	61 bb       	out	0x11, r22	; 17
 210:	08 95       	ret

00000212 <GPIO_WritePort>:
		break;
	}	
}
void GPIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	switch(PortName)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	89 f0       	breq	.+34     	; 0x238 <GPIO_WritePort+0x26>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	28 f0       	brcs	.+10     	; 0x224 <GPIO_WritePort+0x12>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	b9 f0       	breq	.+46     	; 0x24c <GPIO_WritePort+0x3a>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	41 f5       	brne	.+80     	; 0x272 <GPIO_WritePort+0x60>
 222:	1e c0       	rjmp	.+60     	; 0x260 <GPIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	94 2f       	mov	r25, r20
 228:	90 95       	com	r25
 22a:	89 23       	and	r24, r25
 22c:	8b bb       	out	0x1b, r24	; 27
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	64 23       	and	r22, r20
 232:	68 2b       	or	r22, r24
 234:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 236:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	94 2f       	mov	r25, r20
 23c:	90 95       	com	r25
 23e:	89 23       	and	r24, r25
 240:	88 bb       	out	0x18, r24	; 24
 242:	88 b3       	in	r24, 0x18	; 24
 244:	64 23       	and	r22, r20
 246:	68 2b       	or	r22, r24
 248:	68 bb       	out	0x18, r22	; 24
		}
		break;
 24a:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 24c:	85 b3       	in	r24, 0x15	; 21
 24e:	94 2f       	mov	r25, r20
 250:	90 95       	com	r25
 252:	89 23       	and	r24, r25
 254:	85 bb       	out	0x15, r24	; 21
 256:	85 b3       	in	r24, 0x15	; 21
 258:	64 23       	and	r22, r20
 25a:	68 2b       	or	r22, r24
 25c:	65 bb       	out	0x15, r22	; 21
		}
		break;
 25e:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 260:	82 b3       	in	r24, 0x12	; 18
 262:	94 2f       	mov	r25, r20
 264:	90 95       	com	r25
 266:	89 23       	and	r24, r25
 268:	82 bb       	out	0x12, r24	; 18
 26a:	82 b3       	in	r24, 0x12	; 18
 26c:	64 23       	and	r22, r20
 26e:	68 2b       	or	r22, r24
 270:	62 bb       	out	0x12, r22	; 18
 272:	08 95       	ret

00000274 <GPIO_ReadPort>:
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
	switch(PortName)
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	51 f0       	breq	.+20     	; 0x28c <GPIO_ReadPort+0x18>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	28 f0       	brcs	.+10     	; 0x286 <GPIO_ReadPort+0x12>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	49 f0       	breq	.+18     	; 0x292 <GPIO_ReadPort+0x1e>
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	69 f4       	brne	.+26     	; 0x29e <GPIO_ReadPort+0x2a>
 284:	09 c0       	rjmp	.+18     	; 0x298 <GPIO_ReadPort+0x24>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMask);
 286:	89 b3       	in	r24, 0x19	; 25
 288:	86 23       	and	r24, r22
		}
		break;
 28a:	08 95       	ret
		case PB:
		{
			Data = READ_REG(PINB,PortMask);
 28c:	86 b3       	in	r24, 0x16	; 22
 28e:	86 23       	and	r24, r22
		}
		break;
 290:	08 95       	ret
		case PC:
		{
			Data = READ_REG(PINC,PortMask);
 292:	83 b3       	in	r24, 0x13	; 19
 294:	86 23       	and	r24, r22
		}
		break;
 296:	08 95       	ret
		case PD:
		{
			Data = READ_REG(PIND,PortMask);
 298:	80 b3       	in	r24, 0x10	; 16
 29a:	86 23       	and	r24, r22
		}
		break;
 29c:	08 95       	ret
		break;
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
 29e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
	}
	return Data;
	
 2a0:	08 95       	ret

000002a2 <main>:
#include "GPIO.h"
#include "8-bit_TimerCounter0.h"

int main(void)
{
	GPIO_InitPortDirection(PC,0x01,0x01);
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_InitPortDirection>
	TimerInit();
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <TimerInit>
    while(1)
    {	
		GPIO_WritePort(PC,0x01,0x01); 
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	0e 94 09 01 	call	0x212	; 0x212 <GPIO_WritePort>
		//delay_ms(1);
		delay1ms(100);
 2ba:	84 e6       	ldi	r24, 0x64	; 100
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 6d 00 	call	0xda	; 0xda <delay1ms>
		GPIO_WritePort(PC,0x00,0x01);
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	0e 94 09 01 	call	0x212	; 0x212 <GPIO_WritePort>
		//delay_ms(1);
		delay1ms(100);
 2cc:	84 e6       	ldi	r24, 0x64	; 100
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 6d 00 	call	0xda	; 0xda <delay1ms>
 2d4:	ed cf       	rjmp	.-38     	; 0x2b0 <main+0xe>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>

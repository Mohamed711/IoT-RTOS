
TimerCounter0(8-bit).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000003f8  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080007c  0080007c  000004a8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acb  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003fa  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c0  00000000  00000000  00001ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b1  00000000  00000000  00002861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  8a:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer0Init1ms>:
static uint16_t no_of_ticks = 0;


void timer0Init1ms ()
{		
	sei();
  92:	78 94       	sei
	TCCR0 = 0x00;
  94:	13 be       	out	0x33, r1	; 51
	TCCR0 |= (((MODE.MODE_NORMAL_CTC & 0x02)>>1)<<WGM01) | ((MODE.MODE_NORMAL_CTC & 0x01)<<WGM00) | (COM00_VALUE<<COM00)|(COM01_VALUE<<COM01);
  96:	63 b7       	in	r22, 0x33	; 51
  98:	80 91 60 00 	lds	r24, 0x0060
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	ac 01       	movw	r20, r24
  a0:	41 70       	andi	r20, 0x01	; 1
  a2:	50 70       	andi	r21, 0x00	; 0
  a4:	9a 01       	movw	r18, r20
  a6:	00 24       	eor	r0, r0
  a8:	36 95       	lsr	r19
  aa:	27 95       	ror	r18
  ac:	07 94       	ror	r0
  ae:	36 95       	lsr	r19
  b0:	27 95       	ror	r18
  b2:	07 94       	ror	r0
  b4:	32 2f       	mov	r19, r18
  b6:	20 2d       	mov	r18, r0
  b8:	46 2f       	mov	r20, r22
  ba:	42 2b       	or	r20, r18
  bc:	82 70       	andi	r24, 0x02	; 2
  be:	90 70       	andi	r25, 0x00	; 0
  c0:	9c 01       	movw	r18, r24
  c2:	35 95       	asr	r19
  c4:	27 95       	ror	r18
  c6:	c9 01       	movw	r24, r18
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	84 2b       	or	r24, r20
  d6:	83 bf       	out	0x33, r24	; 51
	uint8_t u8LoopCounter;
	
	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
	{
		no_of_ticks = clk1ms[u8LoopCounter].TempFreq;
  d8:	80 91 61 00 	lds	r24, 0x0061
  dc:	90 91 62 00 	lds	r25, 0x0062
  e0:	90 93 7d 00 	sts	0x007D, r25
  e4:	80 93 7c 00 	sts	0x007C, r24
		if (no_of_ticks < 256)
  e8:	8f 3f       	cpi	r24, 0xFF	; 255
  ea:	91 05       	cpc	r25, r1
  ec:	89 f0       	breq	.+34     	; 0x110 <timer0Init1ms+0x7e>
  ee:	80 f0       	brcs	.+32     	; 0x110 <timer0Init1ms+0x7e>
  f0:	e6 e6       	ldi	r30, 0x66	; 102
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
	TCCR0 |= (((MODE.MODE_NORMAL_CTC & 0x02)>>1)<<WGM01) | ((MODE.MODE_NORMAL_CTC & 0x01)<<WGM00) | (COM00_VALUE<<COM00)|(COM01_VALUE<<COM01);
	uint8_t u8LoopCounter;
	
	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
	{
		no_of_ticks = clk1ms[u8LoopCounter].TempFreq;
  f8:	ac 01       	movw	r20, r24
  fa:	20 81       	ld	r18, Z
  fc:	31 81       	ldd	r19, Z+1	; 0x01
		if (no_of_ticks < 256)
  fe:	2f 3f       	cpi	r18, 0xFF	; 255
 100:	31 05       	cpc	r19, r1
 102:	09 f0       	breq	.+2      	; 0x106 <timer0Init1ms+0x74>
 104:	b8 f4       	brcc	.+46     	; 0x134 <timer0Init1ms+0xa2>
 106:	30 93 7d 00 	sts	0x007D, r19
 10a:	20 93 7c 00 	sts	0x007C, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <timer0Init1ms+0x82>
	TCCR0 |= (((MODE.MODE_NORMAL_CTC & 0x02)>>1)<<WGM01) | ((MODE.MODE_NORMAL_CTC & 0x01)<<WGM00) | (COM00_VALUE<<COM00)|(COM01_VALUE<<COM01);
	uint8_t u8LoopCounter;
	
	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
	{
		no_of_ticks = clk1ms[u8LoopCounter].TempFreq;
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
		if (no_of_ticks < 256)
		{
			TCCR0 |= ((clk1ms[u8LoopCounter].RegVal) &0x07);
 114:	93 b7       	in	r25, 0x33	; 51
 116:	fa 01       	movw	r30, r20
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	4e 0f       	add	r20, r30
 122:	5f 1f       	adc	r21, r31
 124:	fa 01       	movw	r30, r20
 126:	ef 59       	subi	r30, 0x9F	; 159
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	84 81       	ldd	r24, Z+4	; 0x04
 12c:	87 70       	andi	r24, 0x07	; 7
 12e:	89 2b       	or	r24, r25
 130:	83 bf       	out	0x33, r24	; 51
			break;
 132:	08 95       	ret
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	35 96       	adiw	r30, 0x05	; 5
	sei();
	TCCR0 = 0x00;
	TCCR0 |= (((MODE.MODE_NORMAL_CTC & 0x02)>>1)<<WGM01) | ((MODE.MODE_NORMAL_CTC & 0x01)<<WGM00) | (COM00_VALUE<<COM00)|(COM01_VALUE<<COM01);
	uint8_t u8LoopCounter;
	
	for(u8LoopCounter=0; u8LoopCounter< PRESCALAR_NUM ; u8LoopCounter++)
 138:	85 30       	cpi	r24, 0x05	; 5
 13a:	91 05       	cpc	r25, r1
 13c:	e9 f6       	brne	.-70     	; 0xf8 <timer0Init1ms+0x66>
 13e:	30 93 7d 00 	sts	0x007D, r19
 142:	20 93 7c 00 	sts	0x007C, r18
 146:	08 95       	ret

00000148 <timer0Start>:
}


void timer0Start (uint16_t millis, FnPtr timeoutFn)
{	
	TIMSK = 0x00;
 148:	19 be       	out	0x39, r1	; 57
	OCR0 = no_of_ticks-1;
 14a:	20 91 7c 00 	lds	r18, 0x007C
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	2c bf       	out	0x3c, r18	; 60
	TIMSK |= 1<<OCIE0;
 152:	29 b7       	in	r18, 0x39	; 57
 154:	22 60       	ori	r18, 0x02	; 2
 156:	29 bf       	out	0x39, r18	; 57
	countCompare = millis;
 158:	90 93 7f 00 	sts	0x007F, r25
 15c:	80 93 7e 00 	sts	0x007E, r24
	TMR_CylicFunPtr = timeoutFn;
 160:	70 93 81 00 	sts	0x0081, r23
 164:	60 93 80 00 	sts	0x0080, r22
}
 168:	08 95       	ret

0000016a <timer0Read>:

uint8_t timer0Read()
{
	return TCNT0;
 16a:	82 b7       	in	r24, 0x32	; 50
}
 16c:	08 95       	ret

0000016e <timer0Delay1ms>:

void timer0Delay1ms(uint16_t millis, FnPtr timeoutFn)
{
	
	uint16_t i;
	for (i=0 ; i < millis ; i++)
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	09 f1       	breq	.+66     	; 0x1b4 <timer0Delay1ms+0x46>
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(MODE.MODE_NORMAL_CTC == u8_MODE_NORMAL)
 176:	40 91 60 00 	lds	r20, 0x0060
			TIFR = 0x01;
		}		
		else if (MODE.MODE_NORMAL_CTC == u8_MODE_CTC)
		{ 
			 TCNT0 = 0;
			 OCR0 = no_of_ticks-1;
 17a:	ec e7       	ldi	r30, 0x7C	; 124
 17c:	f0 e0       	ldi	r31, 0x00	; 0
			 while ((TIFR&0x02)==0);
			 TIFR = 0x02;
 17e:	b2 e0       	ldi	r27, 0x02	; 2
	{
		if(MODE.MODE_NORMAL_CTC == u8_MODE_NORMAL)
		{
			TCNT0 = 256 - no_of_ticks;
			while ((TIFR&0x01)==0);
			TIFR = 0x01;
 180:	a1 e0       	ldi	r26, 0x01	; 1
{
	
	uint16_t i;
	for (i=0 ; i < millis ; i++)
	{
		if(MODE.MODE_NORMAL_CTC == u8_MODE_NORMAL)
 182:	44 23       	and	r20, r20
 184:	41 f4       	brne	.+16     	; 0x196 <timer0Delay1ms+0x28>
		{
			TCNT0 = 256 - no_of_ticks;
 186:	50 81       	ld	r21, Z
 188:	51 95       	neg	r21
 18a:	52 bf       	out	0x32, r21	; 50
			while ((TIFR&0x01)==0);
 18c:	08 b6       	in	r0, 0x38	; 56
 18e:	00 fe       	sbrs	r0, 0
 190:	fd cf       	rjmp	.-6      	; 0x18c <timer0Delay1ms+0x1e>
			TIFR = 0x01;
 192:	a8 bf       	out	0x38, r26	; 56
 194:	0a c0       	rjmp	.+20     	; 0x1aa <timer0Delay1ms+0x3c>
		}		
		else if (MODE.MODE_NORMAL_CTC == u8_MODE_CTC)
 196:	42 30       	cpi	r20, 0x02	; 2
 198:	41 f4       	brne	.+16     	; 0x1aa <timer0Delay1ms+0x3c>
		{ 
			 TCNT0 = 0;
 19a:	12 be       	out	0x32, r1	; 50
			 OCR0 = no_of_ticks-1;
 19c:	50 81       	ld	r21, Z
 19e:	51 50       	subi	r21, 0x01	; 1
 1a0:	5c bf       	out	0x3c, r21	; 60
			 while ((TIFR&0x02)==0);
 1a2:	08 b6       	in	r0, 0x38	; 56
 1a4:	01 fe       	sbrs	r0, 1
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <timer0Delay1ms+0x34>
			 TIFR = 0x02;
 1a8:	b8 bf       	out	0x38, r27	; 56

void timer0Delay1ms(uint16_t millis, FnPtr timeoutFn)
{
	
	uint16_t i;
	for (i=0 ; i < millis ; i++)
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	39 f7       	brne	.-50     	; 0x182 <timer0Delay1ms+0x14>
			 OCR0 = no_of_ticks-1;
			 while ((TIFR&0x02)==0);
			 TIFR = 0x02;
		}
	}
	timeoutFn();
 1b4:	fb 01       	movw	r30, r22
 1b6:	09 95       	icall
}
 1b8:	08 95       	ret

000001ba <timer0ReadOVFFlag>:


uint8_t timer0ReadOVFFlag()
{
	return (TIFR&0x01);
 1ba:	88 b7       	in	r24, 0x38	; 56
}
 1bc:	81 70       	andi	r24, 0x01	; 1
 1be:	08 95       	ret

000001c0 <timer0ReadCMPFlag>:

uint8_t timer0ReadCMPFlag()
{
	return (TIFR&0x02);
 1c0:	88 b7       	in	r24, 0x38	; 56
}
 1c2:	82 70       	andi	r24, 0x02	; 2
 1c4:	08 95       	ret

000001c6 <setTCNT0>:

void setTCNT0 (uint8_t TCNT0_value)
{
	TCNT0 = TCNT0_value;
 1c6:	82 bf       	out	0x32, r24	; 50
}
 1c8:	08 95       	ret

000001ca <setOCR0>:

void setOCR0 (uint8_t OCR0_value)
{
	OCR0 = OCR0_value - 1;
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	8c bf       	out	0x3c, r24	; 60
}
 1ce:	08 95       	ret

000001d0 <timer0Stop>:

void timer0Stop()
{
	TCCR0 |= (0<<CS02) | (0<<CS01) | (0<<CS00);
 1d0:	83 b7       	in	r24, 0x33	; 51
 1d2:	83 bf       	out	0x33, r24	; 51
}
 1d4:	08 95       	ret

000001d6 <__vector_10>:



ISR(TIMER0_COMP_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	count++;
 1f8:	80 91 82 00 	lds	r24, 0x0082
 1fc:	90 91 83 00 	lds	r25, 0x0083
 200:	a0 91 84 00 	lds	r26, 0x0084
 204:	b0 91 85 00 	lds	r27, 0x0085
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	a1 1d       	adc	r26, r1
 20c:	b1 1d       	adc	r27, r1
 20e:	80 93 82 00 	sts	0x0082, r24
 212:	90 93 83 00 	sts	0x0083, r25
 216:	a0 93 84 00 	sts	0x0084, r26
 21a:	b0 93 85 00 	sts	0x0085, r27
	if (count == countCompare)
 21e:	40 91 7e 00 	lds	r20, 0x007E
 222:	50 91 7f 00 	lds	r21, 0x007F
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	84 17       	cp	r24, r20
 22c:	95 07       	cpc	r25, r21
 22e:	a6 07       	cpc	r26, r22
 230:	b7 07       	cpc	r27, r23
 232:	69 f4       	brne	.+26     	; 0x24e <__vector_10+0x78>
	{
		TMR_CylicFunPtr();
 234:	e0 91 80 00 	lds	r30, 0x0080
 238:	f0 91 81 00 	lds	r31, 0x0081
 23c:	09 95       	icall
		count = 0;
 23e:	10 92 82 00 	sts	0x0082, r1
 242:	10 92 83 00 	sts	0x0083, r1
 246:	10 92 84 00 	sts	0x0084, r1
 24a:	10 92 85 00 	sts	0x0085, r1
	}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	89 f0       	breq	.+34     	; 0x296 <GPIO_InitPortDirection+0x26>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	28 f0       	brcs	.+10     	; 0x282 <GPIO_InitPortDirection+0x12>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	b9 f0       	breq	.+46     	; 0x2aa <GPIO_InitPortDirection+0x3a>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	41 f5       	brne	.+80     	; 0x2d0 <GPIO_InitPortDirection+0x60>
 280:	1e c0       	rjmp	.+60     	; 0x2be <GPIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
 282:	8a b3       	in	r24, 0x1a	; 26
 284:	94 2f       	mov	r25, r20
 286:	90 95       	com	r25
 288:	89 23       	and	r24, r25
 28a:	8a bb       	out	0x1a, r24	; 26
 28c:	8a b3       	in	r24, 0x1a	; 26
 28e:	64 23       	and	r22, r20
 290:	68 2b       	or	r22, r24
 292:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 294:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
 296:	87 b3       	in	r24, 0x17	; 23
 298:	94 2f       	mov	r25, r20
 29a:	90 95       	com	r25
 29c:	89 23       	and	r24, r25
 29e:	87 bb       	out	0x17, r24	; 23
 2a0:	87 b3       	in	r24, 0x17	; 23
 2a2:	64 23       	and	r22, r20
 2a4:	68 2b       	or	r22, r24
 2a6:	67 bb       	out	0x17, r22	; 23
		}
		break;
 2a8:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
 2aa:	84 b3       	in	r24, 0x14	; 20
 2ac:	94 2f       	mov	r25, r20
 2ae:	90 95       	com	r25
 2b0:	89 23       	and	r24, r25
 2b2:	84 bb       	out	0x14, r24	; 20
 2b4:	84 b3       	in	r24, 0x14	; 20
 2b6:	64 23       	and	r22, r20
 2b8:	68 2b       	or	r22, r24
 2ba:	64 bb       	out	0x14, r22	; 20
		}
		break;
 2bc:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 2be:	81 b3       	in	r24, 0x11	; 17
 2c0:	94 2f       	mov	r25, r20
 2c2:	90 95       	com	r25
 2c4:	89 23       	and	r24, r25
 2c6:	81 bb       	out	0x11, r24	; 17
 2c8:	81 b3       	in	r24, 0x11	; 17
 2ca:	64 23       	and	r22, r20
 2cc:	68 2b       	or	r22, r24
 2ce:	61 bb       	out	0x11, r22	; 17
 2d0:	08 95       	ret

000002d2 <GPIO_WritePort>:
		break;
	}	
}
void GPIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	switch(PortName)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	89 f0       	breq	.+34     	; 0x2f8 <GPIO_WritePort+0x26>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	28 f0       	brcs	.+10     	; 0x2e4 <GPIO_WritePort+0x12>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	b9 f0       	breq	.+46     	; 0x30c <GPIO_WritePort+0x3a>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	41 f5       	brne	.+80     	; 0x332 <GPIO_WritePort+0x60>
 2e2:	1e c0       	rjmp	.+60     	; 0x320 <GPIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 2e4:	8b b3       	in	r24, 0x1b	; 27
 2e6:	94 2f       	mov	r25, r20
 2e8:	90 95       	com	r25
 2ea:	89 23       	and	r24, r25
 2ec:	8b bb       	out	0x1b, r24	; 27
 2ee:	8b b3       	in	r24, 0x1b	; 27
 2f0:	64 23       	and	r22, r20
 2f2:	68 2b       	or	r22, r24
 2f4:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 2f6:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 2f8:	88 b3       	in	r24, 0x18	; 24
 2fa:	94 2f       	mov	r25, r20
 2fc:	90 95       	com	r25
 2fe:	89 23       	and	r24, r25
 300:	88 bb       	out	0x18, r24	; 24
 302:	88 b3       	in	r24, 0x18	; 24
 304:	64 23       	and	r22, r20
 306:	68 2b       	or	r22, r24
 308:	68 bb       	out	0x18, r22	; 24
		}
		break;
 30a:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	94 2f       	mov	r25, r20
 310:	90 95       	com	r25
 312:	89 23       	and	r24, r25
 314:	85 bb       	out	0x15, r24	; 21
 316:	85 b3       	in	r24, 0x15	; 21
 318:	64 23       	and	r22, r20
 31a:	68 2b       	or	r22, r24
 31c:	65 bb       	out	0x15, r22	; 21
		}
		break;
 31e:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 320:	82 b3       	in	r24, 0x12	; 18
 322:	94 2f       	mov	r25, r20
 324:	90 95       	com	r25
 326:	89 23       	and	r24, r25
 328:	82 bb       	out	0x12, r24	; 18
 32a:	82 b3       	in	r24, 0x12	; 18
 32c:	64 23       	and	r22, r20
 32e:	68 2b       	or	r22, r24
 330:	62 bb       	out	0x12, r22	; 18
 332:	08 95       	ret

00000334 <GPIO_ReadPort>:
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
	switch(PortName)
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	51 f0       	breq	.+20     	; 0x34c <GPIO_ReadPort+0x18>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	28 f0       	brcs	.+10     	; 0x346 <GPIO_ReadPort+0x12>
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	49 f0       	breq	.+18     	; 0x352 <GPIO_ReadPort+0x1e>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	69 f4       	brne	.+26     	; 0x35e <GPIO_ReadPort+0x2a>
 344:	09 c0       	rjmp	.+18     	; 0x358 <GPIO_ReadPort+0x24>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMask);
 346:	89 b3       	in	r24, 0x19	; 25
 348:	86 23       	and	r24, r22
		}
		break;
 34a:	08 95       	ret
		case PB:
		{
			Data = READ_REG(PINB,PortMask);
 34c:	86 b3       	in	r24, 0x16	; 22
 34e:	86 23       	and	r24, r22
		}
		break;
 350:	08 95       	ret
		case PC:
		{
			Data = READ_REG(PINC,PortMask);
 352:	83 b3       	in	r24, 0x13	; 19
 354:	86 23       	and	r24, r22
		}
		break;
 356:	08 95       	ret
		case PD:
		{
			Data = READ_REG(PIND,PortMask);
 358:	80 b3       	in	r24, 0x10	; 16
 35a:	86 23       	and	r24, r22
		}
		break;
 35c:	08 95       	ret
		break;
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
 35e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
	}
	return Data;
	
 360:	08 95       	ret

00000362 <HAL_Timer_Init>:
#include "8-bit_TimerCounter0.h"
#include "HAL_Timer_AVR.h"

void HAL_Timer_Init(Timer_InitTypeDef * timer)
{
	timer0Init1ms();
 362:	0e 94 49 00 	call	0x92	; 0x92 <timer0Init1ms>
}
 366:	08 95       	ret

00000368 <HAL_Timer_Delay>:

void HAL_Timer_Delay(Timer_HandleTypeDef * timer)
{
 368:	fc 01       	movw	r30, r24
	timer0Delay1ms(timer->millis, timer->timeoutFn);
 36a:	62 81       	ldd	r22, Z+2	; 0x02
 36c:	73 81       	ldd	r23, Z+3	; 0x03
 36e:	80 81       	ld	r24, Z
 370:	91 81       	ldd	r25, Z+1	; 0x01
 372:	0e 94 b7 00 	call	0x16e	; 0x16e <timer0Delay1ms>
}
 376:	08 95       	ret

00000378 <HAL_Timer_Start>:
void HAL_Timer_Start (Timer_HandleTypeDef * timer)
{
 378:	fc 01       	movw	r30, r24
	timer0Start(timer->millis, timer->timeoutFn);
 37a:	62 81       	ldd	r22, Z+2	; 0x02
 37c:	73 81       	ldd	r23, Z+3	; 0x03
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	0e 94 a4 00 	call	0x148	; 0x148 <timer0Start>
}
 386:	08 95       	ret

00000388 <HAL_Timer_Stop>:
void HAL_Timer_Stop(Timer_HandleTypeDef * timer)
{
	timer0Stop();
 388:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <timer0Stop>
 38c:	08 95       	ret

0000038e <toggle>:
	GPIO_WritePort(PC,0x00,0x01);
}
static uint8_t state = 0x01;
void toggle ()
{
	state = state ^0x01;
 38e:	60 91 7a 00 	lds	r22, 0x007A
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	68 27       	eor	r22, r24
 396:	60 93 7a 00 	sts	0x007A, r22
	GPIO_WritePort(PC,state,0x01);
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_WritePort>
}
 3a2:	08 95       	ret

000003a4 <trial_fnON>:
#include "8-bit_TimerCounter0.h"
#include "HAL_Timer_AVR.h"

void trial_fnON()
{
	GPIO_WritePort(PC,0x01,0x01);
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_WritePort>
}
 3ae:	08 95       	ret

000003b0 <trial_fnOFF>:

void trial_fnOFF()
{
	GPIO_WritePort(PC,0x00,0x01);
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <GPIO_WritePort>
}
 3ba:	08 95       	ret

000003bc <main>:
	GPIO_WritePort(PC,state,0x01);
}


int main(void)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	00 d0       	rcall	.+0      	; 0x3c2 <main+0x6>
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <main+0x8>
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	
	GPIO_InitPortDirection(PC,0x01,0x01);
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	0e 94 38 01 	call	0x270	; 0x270 <GPIO_InitPortDirection>
	
	Timer_InitTypeDef timerInit;
	Timer_HandleTypeDef timerHandle;
	timerHandle.millis = 1000;
 3d2:	88 ee       	ldi	r24, 0xE8	; 232
 3d4:	93 e0       	ldi	r25, 0x03	; 3
 3d6:	9a 83       	std	Y+2, r25	; 0x02
 3d8:	89 83       	std	Y+1, r24	; 0x01
	
	
	HAL_Timer_Init(&timerInit);
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	0e 94 b1 01 	call	0x362	; 0x362 <HAL_Timer_Init>
	
    while(1)
    {	
		
		timerHandle.timeoutFn = toggle;
 3e2:	07 ec       	ldi	r16, 0xC7	; 199
 3e4:	11 e0       	ldi	r17, 0x01	; 1
 3e6:	1c 83       	std	Y+4, r17	; 0x04
 3e8:	0b 83       	std	Y+3, r16	; 0x03
		/*timerHandle.timeoutFn = trial_fnON;*/
		HAL_Timer_Start(&timerHandle);
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	0e 94 bc 01 	call	0x378	; 0x378 <HAL_Timer_Start>
 3f2:	f9 cf       	rjmp	.-14     	; 0x3e6 <main+0x2a>

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>


ADC_test_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800084  00800084  0000039e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000af8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a4  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bc  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f0  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028f  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 22 01 	call	0x244	; 0x244 <main>
  8a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adcOff>:
*
**************************************************************************************************************************/
void adcOff(void)
{
	// disable interrupt
	ADCSRA &= (0 << ADIE);
  92:	86 b1       	in	r24, 0x06	; 6
  94:	16 b8       	out	0x06, r1	; 6
	// disable ADC
	ADCSRA &= (0 << ADEN);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	16 b8       	out	0x06, r1	; 6
}
  9a:	08 95       	ret

0000009c <adcInit>:
*
* \return None
*
**************************************************************************************************************************/
void adcInit(uint8_t voltage_ref_sel , bool enable_interrupt_, uint8_t trigger , uint8_t channel , uint32_t u32MaxFreq ) 
{
  9c:	ef 92       	push	r14
  9e:	ff 92       	push	r15
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	96 2f       	mov	r25, r22
  aa:	c4 2f       	mov	r28, r20
  ac:	d2 2f       	mov	r29, r18
  ae:	b8 01       	movw	r22, r16
  b0:	a7 01       	movw	r20, r14
	/* 1)Set ADC reference */
	enable_interrupt=enable_interrupt_;
  b2:	90 93 86 00 	sts	0x0086, r25
	ADMUX |= (  (( (voltage_ref_sel)&0x02)>>1)<<REFS1 )| (((voltage_ref_sel)&0x01)<<REFS0 ) ;
  b6:	a7 b1       	in	r26, 0x07	; 7
  b8:	e8 2f       	mov	r30, r24
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	9f 01       	movw	r18, r30
  be:	21 70       	andi	r18, 0x01	; 1
  c0:	30 70       	andi	r19, 0x00	; 0
  c2:	c9 01       	movw	r24, r18
  c4:	00 24       	eor	r0, r0
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
  ca:	07 94       	ror	r0
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	07 94       	ror	r0
  d2:	98 2f       	mov	r25, r24
  d4:	80 2d       	mov	r24, r0
  d6:	8a 2b       	or	r24, r26
  d8:	e2 70       	andi	r30, 0x02	; 2
  da:	f0 70       	andi	r31, 0x00	; 0
  dc:	9f 01       	movw	r18, r30
  de:	35 95       	asr	r19
  e0:	27 95       	ror	r18
  e2:	f9 01       	movw	r30, r18
  e4:	f6 95       	lsr	r31
  e6:	fe 2f       	mov	r31, r30
  e8:	ee 27       	eor	r30, r30
  ea:	f7 95       	ror	r31
  ec:	e7 95       	ror	r30
  ee:	e8 2b       	or	r30, r24
  f0:	e7 b9       	out	0x07, r30	; 7
	/* 2)Get the most suitable pre-scalar */ 
	
	uint8_t u8LoopCount;
	for( u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
	{
		if(clk[u8LoopCount].u32TempFreq < u32MaxFreq )
  f2:	41 32       	cpi	r20, 0x21	; 33
  f4:	81 ea       	ldi	r24, 0xA1	; 161
  f6:	58 07       	cpc	r21, r24
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	68 07       	cpc	r22, r24
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	78 07       	cpc	r23, r24
 100:	88 f4       	brcc	.+34     	; 0x124 <adcInit+0x88>
 102:	e5 e6       	ldi	r30, 0x65	; 101
 104:	f0 e0       	ldi	r31, 0x00	; 0
	ADMUX |= (  (( (voltage_ref_sel)&0x02)>>1)<<REFS1 )| (((voltage_ref_sel)&0x01)<<REFS0 ) ;
		
	/* 2)Get the most suitable pre-scalar */ 
	
	uint8_t u8LoopCount;
	for( u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 106:	21 e0       	ldi	r18, 0x01	; 1
	{
		if(clk[u8LoopCount].u32TempFreq < u32MaxFreq )
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	a2 81       	ldd	r26, Z+2	; 0x02
 10e:	b3 81       	ldd	r27, Z+3	; 0x03
 110:	84 17       	cp	r24, r20
 112:	95 07       	cpc	r25, r21
 114:	a6 07       	cpc	r26, r22
 116:	b7 07       	cpc	r27, r23
 118:	30 f0       	brcs	.+12     	; 0x126 <adcInit+0x8a>
	ADMUX |= (  (( (voltage_ref_sel)&0x02)>>1)<<REFS1 )| (((voltage_ref_sel)&0x01)<<REFS0 ) ;
		
	/* 2)Get the most suitable pre-scalar */ 
	
	uint8_t u8LoopCount;
	for( u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	35 96       	adiw	r30, 0x05	; 5
 11e:	27 30       	cpi	r18, 0x07	; 7
 120:	99 f7       	brne	.-26     	; 0x108 <adcInit+0x6c>
 122:	01 c0       	rjmp	.+2      	; 0x126 <adcInit+0x8a>
 124:	20 e0       	ldi	r18, 0x00	; 0
		if(clk[u8LoopCount].u32TempFreq < u32MaxFreq )
		{
			break;
		}
	}
	ADCSRA &=0xF8; 
 126:	86 b1       	in	r24, 0x06	; 6
 128:	88 7f       	andi	r24, 0xF8	; 248
 12a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |=(clk[u8LoopCount].u8RegVal & 0x03);
 12c:	36 b1       	in	r19, 0x06	; 6
 12e:	82 2f       	mov	r24, r18
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	8e 0f       	add	r24, r30
 13e:	9f 1f       	adc	r25, r31
 140:	fc 01       	movw	r30, r24
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	84 81       	ldd	r24, Z+4	; 0x04
 148:	83 70       	andi	r24, 0x03	; 3
 14a:	83 2b       	or	r24, r19
 14c:	86 b9       	out	0x06, r24	; 6
	#if ADC_JUSTIFY == 'L'
	/* Left adjust ADC result to allow easy 8 bit reading */
	ADMUX |= (1 << ADLAR); 
	#elif ADC_JUSTIFY == 'R'
    /*Right adjust */
	ADMUX |= (0 << ADLAR); 
 14e:	87 b1       	in	r24, 0x07	; 7
 150:	87 b9       	out	0x07, r24	; 7
	#endif
	/* 4) Enable ADC Interrupt */
	if( enable_interrupt == 1)
 152:	80 91 86 00 	lds	r24, 0x0086
 156:	88 23       	and	r24, r24
 158:	11 f0       	breq	.+4      	; 0x15e <adcInit+0xc2>
	{	
	ADCSRA |= (1 << ADIE);
 15a:	33 9a       	sbi	0x06, 3	; 6
	/* 6) set global interrupt */
	sei();
 15c:	78 94       	sei
	}	
	/* enable */ 
	if(trigger != Free_Running_mode )
 15e:	c1 11       	cpse	r28, r1
	{	
	ADCSRA |=(1<<ADATE);
 160:	35 9a       	sbi	0x06, 5	; 6
	}	
	/* 8)set channel */
	ADMUX |=((channel)&0x1F);
 162:	87 b1       	in	r24, 0x07	; 7
 164:	df 71       	andi	r29, 0x1F	; 31
 166:	d8 2b       	or	r29, r24
 168:	d7 b9       	out	0x07, r29	; 7
	/* 5) Enable ADC */
	ADCSRA |= (1 << ADEN);
 16a:	37 9a       	sbi	0x06, 7	; 6
	
	if( enable_interrupt == 1)	
 16c:	80 91 86 00 	lds	r24, 0x0086
 170:	81 11       	cpse	r24, r1
	{	
	/* 7) Start conversions single conversion */
	ADCSRA |= (1 << ADSC);
 172:	36 9a       	sbi	0x06, 6	; 6
	}	
	/* set trigger */
	SFIOR |= ((trigger)&07)<<5;
 174:	80 b7       	in	r24, 0x30	; 48
 176:	c2 95       	swap	r28
 178:	cc 0f       	add	r28, r28
 17a:	c0 7e       	andi	r28, 0xE0	; 224
 17c:	c8 2b       	or	r28, r24
 17e:	c0 bf       	out	0x30, r28	; 48
	
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret

0000018e <__vector_16>:
/* #if enable_interrupt == 1 */
ISR(ADC_vect)
{  
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
	 #if ADC_JUSTIFY == 'R'
	/*read the low byte of the converted data*/
	ADC_result = ADCL;
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 85 00 	sts	0x0085, r25
 1aa:	80 93 84 00 	sts	0x0084, r24
	/*read the high byte of the converted data*/
	ADC_result |= ADCH <<8;
 1ae:	45 b1       	in	r20, 0x05	; 5
 1b0:	20 91 84 00 	lds	r18, 0x0084
 1b4:	30 91 85 00 	lds	r19, 0x0085
 1b8:	94 2f       	mov	r25, r20
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	82 2b       	or	r24, r18
 1be:	93 2b       	or	r25, r19
 1c0:	90 93 85 00 	sts	0x0085, r25
 1c4:	80 93 84 00 	sts	0x0084, r24
	
	#elif ADC_JUSTIFY == 'L'
	ADC_result = ADCH ;
	#endif		
	/* set the start conversion to begin next conversion  */
	ADCSRA |= (1 << ADSC);
 1c8:	36 9a       	sbi	0x06, 6	; 6

}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <adcResult_u16>:
* \return the ADC 10 bit result
*
**************************************************************************************************************************/
uint16_t adcResult_u16()
{  
	if( enable_interrupt == 0)
 1de:	80 91 86 00 	lds	r24, 0x0086
 1e2:	88 23       	and	r24, r24
 1e4:	b9 f4       	brne	.+46     	; 0x214 <adcResult_u16+0x36>
	{
		
	ADCSRA |= (1 << ADSC);
 1e6:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
 1e8:	34 9b       	sbis	0x06, 4	; 6
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <adcResult_u16+0xa>
	
	ADC_result = ADCL;
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 85 00 	sts	0x0085, r25
 1f4:	80 93 84 00 	sts	0x0084, r24
	ADC_result |= ADCH<<8;
 1f8:	45 b1       	in	r20, 0x05	; 5
 1fa:	20 91 84 00 	lds	r18, 0x0084
 1fe:	30 91 85 00 	lds	r19, 0x0085
 202:	94 2f       	mov	r25, r20
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	82 2b       	or	r24, r18
 208:	93 2b       	or	r25, r19
 20a:	90 93 85 00 	sts	0x0085, r25
 20e:	80 93 84 00 	sts	0x0084, r24
	
	ADCSRA|=(1<<ADIF);
 212:	34 9a       	sbi	0x06, 4	; 6
	} 
	    
    return ADC_result;	
 214:	80 91 84 00 	lds	r24, 0x0084
 218:	90 91 85 00 	lds	r25, 0x0085
}
 21c:	08 95       	ret

0000021e <adcResult_u8>:
*  \return the ADC 8 bit result
*
**************************************************************************************************************************/
uint8_t adcResult_u8()
{
	if( enable_interrupt == 0)
 21e:	80 91 86 00 	lds	r24, 0x0086
 222:	88 23       	and	r24, r24
 224:	51 f4       	brne	.+20     	; 0x23a <adcResult_u8+0x1c>
	{
		
	ADCSRA |= (1 << ADSC);
 226:	36 9a       	sbi	0x06, 6	; 6
	
	while(!(ADCSRA & (1<<ADIF)));
 228:	34 9b       	sbis	0x06, 4	; 6
 22a:	fe cf       	rjmp	.-4      	; 0x228 <adcResult_u8+0xa>
	ADC_result = ADCH;
 22c:	85 b1       	in	r24, 0x05	; 5
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 85 00 	sts	0x0085, r25
 234:	80 93 84 00 	sts	0x0084, r24
	ADCSRA|=(1<<ADIF);
 238:	34 9a       	sbi	0x06, 4	; 6
	}	
		
	return ADC_result;
 23a:	80 91 84 00 	lds	r24, 0x0084
 23e:	90 91 85 00 	lds	r25, 0x0085
}
 242:	08 95       	ret

00000244 <main>:

#include "ADC.h"
#include "ADC_CFG.h" 
#include "HAL_ADC_AVR.h"
int main(void)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	2a 97       	sbiw	r28, 0x0a	; 10
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
	
	
	uint16_t result;
	DDRA &=(~(0xFF));
 258:	8a b3       	in	r24, 0x1a	; 26
 25a:	1a ba       	out	0x1a, r1	; 26
	
	
	
	DDRC |=0xFF;
 25c:	84 b3       	in	r24, 0x14	; 20
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	84 bb       	out	0x14, r24	; 20
	DDRD |=0xFF;
 262:	91 b3       	in	r25, 0x11	; 17
 264:	81 bb       	out	0x11, r24	; 17
	
	ADC_InitTypeDef handle;
	handle.channel=ch_ADC0;
 266:	1a 82       	std	Y+2, r1	; 0x02
	handle.enable_interrupt= true;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	8c 83       	std	Y+4, r24	; 0x04
	handle.trigger=Free_Running_mode;
 26c:	1b 82       	std	Y+3, r1	; 0x03
	handle.voltage_ref_sel=Internal_2_dot_56V_Voltage_Reference_with_external_cap_at_AREF_pin;
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	89 83       	std	Y+1, r24	; 0x01
	handle.u32MaxFreq=75000000UL;
 272:	80 ec       	ldi	r24, 0xC0	; 192
 274:	98 e6       	ldi	r25, 0x68	; 104
 276:	a8 e7       	ldi	r26, 0x78	; 120
 278:	b4 e0       	ldi	r27, 0x04	; 4
 27a:	8d 83       	std	Y+5, r24	; 0x05
 27c:	9e 83       	std	Y+6, r25	; 0x06
 27e:	af 83       	std	Y+7, r26	; 0x07
 280:	b8 87       	std	Y+8, r27	; 0x08
	ADC_handle_typedef res;
	res.return_result=0x00;
 282:	1a 86       	std	Y+10, r1	; 0x0a
 284:	19 86       	std	Y+9, r1	; 0x09
    while(1)
    {
      
	    HAL_ADC_Init(&handle);
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <HAL_ADC_Init>
	    HAL_ADC_read(&res);
 28e:	ce 01       	movw	r24, r28
 290:	09 96       	adiw	r24, 0x09	; 9
 292:	0e 94 50 01 	call	0x2a0	; 0x2a0 <HAL_ADC_read>
	   
	    result =res.return_result;
 296:	99 85       	ldd	r25, Y+9	; 0x09
 298:	8a 85       	ldd	r24, Y+10	; 0x0a
	 
	 PORTC =(result &0xFF);
 29a:	95 bb       	out	0x15, r25	; 21
	 PORTD =((result)>>8);
 29c:	82 bb       	out	0x12, r24	; 18
 29e:	f3 cf       	rjmp	.-26     	; 0x286 <main+0x42>

000002a0 <HAL_ADC_read>:

#include "HAL_ADC_AVR.h"


void HAL_ADC_read(ADC_handle_typedef * adc)
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	adc->return_result = adcResult_u16();
 2a6:	0e 94 ef 00 	call	0x1de	; 0x1de <adcResult_u16>
 2aa:	99 83       	std	Y+1, r25	; 0x01
 2ac:	88 83       	st	Y, r24
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <HAL_ADC_OFF>:
void HAL_ADC_OFF(void)
{
	adcOff();
 2b4:	0e 94 49 00 	call	0x92	; 0x92 <adcOff>
}
 2b8:	08 95       	ret

000002ba <HAL_ADC_Init>:

void HAL_ADC_Init(ADC_InitTypeDef *adc)
{
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	fc 01       	movw	r30, r24
adcInit( adc->voltage_ref_sel , adc->enable_interrupt , adc->trigger ,  adc->channel , adc->u32MaxFreq ) ;
 2c4:	e4 80       	ldd	r14, Z+4	; 0x04
 2c6:	f5 80       	ldd	r15, Z+5	; 0x05
 2c8:	06 81       	ldd	r16, Z+6	; 0x06
 2ca:	17 81       	ldd	r17, Z+7	; 0x07
 2cc:	80 81       	ld	r24, Z
 2ce:	63 81       	ldd	r22, Z+3	; 0x03
 2d0:	42 81       	ldd	r20, Z+2	; 0x02
 2d2:	21 81       	ldd	r18, Z+1	; 0x01
 2d4:	0e 94 4e 00 	call	0x9c	; 0x9c <adcInit>

}
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>


ADC_test_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008a  0080008a  00000366  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f6  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002eb  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fd  00000000  00000000  00001661  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000235  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f1  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  8a:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_off>:
#endif

void adc_off(void)
{
	// disable interrupt
	ADCSRA &= (0 << ADIE);
  92:	86 b1       	in	r24, 0x06	; 6
  94:	16 b8       	out	0x06, r1	; 6
	// disable ADC
	ADCSRA &= (0 << ADEN);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	16 b8       	out	0x06, r1	; 6
}
  9a:	08 95       	ret

0000009c <adc_init>:
void adc_init(void) 
{
	// Set ADC reference
	
		ADMUX |= (  (( (ADC_volt_CH_config.voltage_ref_sel)&0x02)>>1)<<REFS1 )| (((ADC_volt_CH_config.voltage_ref_sel)&0x01)<<REFS0 ) ;
  9c:	67 b1       	in	r22, 0x07	; 7
  9e:	80 91 87 00 	lds	r24, 0x0087
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	ac 01       	movw	r20, r24
  a6:	41 70       	andi	r20, 0x01	; 1
  a8:	50 70       	andi	r21, 0x00	; 0
  aa:	9a 01       	movw	r18, r20
  ac:	00 24       	eor	r0, r0
  ae:	36 95       	lsr	r19
  b0:	27 95       	ror	r18
  b2:	07 94       	ror	r0
  b4:	36 95       	lsr	r19
  b6:	27 95       	ror	r18
  b8:	07 94       	ror	r0
  ba:	32 2f       	mov	r19, r18
  bc:	20 2d       	mov	r18, r0
  be:	46 2f       	mov	r20, r22
  c0:	42 2b       	or	r20, r18
  c2:	82 70       	andi	r24, 0x02	; 2
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	9c 01       	movw	r18, r24
  c8:	35 95       	asr	r19
  ca:	27 95       	ror	r18
  cc:	c9 01       	movw	r24, r18
  ce:	96 95       	lsr	r25
  d0:	98 2f       	mov	r25, r24
  d2:	88 27       	eor	r24, r24
  d4:	97 95       	ror	r25
  d6:	87 95       	ror	r24
  d8:	84 2b       	or	r24, r20
  da:	87 b9       	out	0x07, r24	; 7
	/*Get the most suitable pre-scalar */
	
	u8 u8LoopCount;
	for( u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
	{
		if(clk[u8LoopCount].u32TempFreq < micro_freq.u32MaxFreq )
  dc:	40 91 60 00 	lds	r20, 0x0060
  e0:	50 91 61 00 	lds	r21, 0x0061
  e4:	60 91 62 00 	lds	r22, 0x0062
  e8:	70 91 63 00 	lds	r23, 0x0063
  ec:	80 91 64 00 	lds	r24, 0x0064
  f0:	90 91 65 00 	lds	r25, 0x0065
  f4:	a0 91 66 00 	lds	r26, 0x0066
  f8:	b0 91 67 00 	lds	r27, 0x0067
  fc:	84 17       	cp	r24, r20
  fe:	95 07       	cpc	r25, r21
 100:	a6 07       	cpc	r26, r22
 102:	b7 07       	cpc	r27, r23
 104:	88 f0       	brcs	.+34     	; 0x128 <adc_init+0x8c>
 106:	e9 e6       	ldi	r30, 0x69	; 105
 108:	f0 e0       	ldi	r31, 0x00	; 0
	
	
	/*Get the most suitable pre-scalar */
	
	u8 u8LoopCount;
	for( u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 10a:	21 e0       	ldi	r18, 0x01	; 1
	{
		if(clk[u8LoopCount].u32TempFreq < micro_freq.u32MaxFreq )
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	a2 81       	ldd	r26, Z+2	; 0x02
 112:	b3 81       	ldd	r27, Z+3	; 0x03
 114:	84 17       	cp	r24, r20
 116:	95 07       	cpc	r25, r21
 118:	a6 07       	cpc	r26, r22
 11a:	b7 07       	cpc	r27, r23
 11c:	30 f0       	brcs	.+12     	; 0x12a <adc_init+0x8e>
	
	
	/*Get the most suitable pre-scalar */
	
	u8 u8LoopCount;
	for( u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	35 96       	adiw	r30, 0x05	; 5
 122:	27 30       	cpi	r18, 0x07	; 7
 124:	99 f7       	brne	.-26     	; 0x10c <adc_init+0x70>
 126:	01 c0       	rjmp	.+2      	; 0x12a <adc_init+0x8e>
 128:	20 e0       	ldi	r18, 0x00	; 0
		if(clk[u8LoopCount].u32TempFreq < micro_freq.u32MaxFreq )
		{
			break;
		}
	}
	ADCSRA &=0xF8;
 12a:	86 b1       	in	r24, 0x06	; 6
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	86 b9       	out	0x06, r24	; 6
	ADCSRA |=(clk[u8LoopCount].u8RegVal & 0x03);
 130:	36 b1       	in	r19, 0x06	; 6
 132:	82 2f       	mov	r24, r18
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	fc 01       	movw	r30, r24
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	8e 0f       	add	r24, r30
 142:	9f 1f       	adc	r25, r31
 144:	fc 01       	movw	r30, r24
 146:	ec 59       	subi	r30, 0x9C	; 156
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	84 81       	ldd	r24, Z+4	; 0x04
 14c:	83 70       	andi	r24, 0x03	; 3
 14e:	83 2b       	or	r24, r19
 150:	86 b9       	out	0x06, r24	; 6
    
	
	// i only support right adjust
	// Set ADC justify
	#if ADC_JUSTIFY == 'L'
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 152:	3d 9a       	sbi	0x07, 5	; 7
	#elif ADC_JUSTIFY == 'R'
	ADMUX |= (0 << ADLAR); // Right adjust
	#endif
		
    // Enable ADC Interrupt
	ADCSRA |= (1 << ADIE);
 154:	33 9a       	sbi	0x06, 3	; 6
	
	// Enable ADC
	ADCSRA |= (1 << ADEN);
 156:	37 9a       	sbi	0x06, 7	; 6
	
	//set global interrupt
	sei();
 158:	78 94       	sei
	 // Start conversions single conversion
	ADCSRA |= (1 << ADSC);
 15a:	36 9a       	sbi	0x06, 6	; 6
	//set channel
	ADMUX |=((ADC_volt_CH_config.channel)&0x1F);
 15c:	97 b1       	in	r25, 0x07	; 7
 15e:	80 91 88 00 	lds	r24, 0x0088
 162:	8f 71       	andi	r24, 0x1F	; 31
 164:	89 2b       	or	r24, r25
 166:	87 b9       	out	0x07, r24	; 7
	
}
 168:	08 95       	ret

0000016a <__vector_16>:
ISR(ADC_vect)
{  
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
	/*read the low byte of the converted data*/
	ADC_result = ADCL;
	/*read the high byte of the converted data*/
	ADC_result |= ADCH <<8;
	#elif ADC_JUSTIFY=='L'
	ADC_result = ADCH ;
 176:	85 b1       	in	r24, 0x05	; 5
 178:	80 93 8a 00 	sts	0x008A, r24
	#endif	
	
	
	/* set the start conversion to begin next conversion  */
	ADCSRA |= (1 << ADSC);
 17c:	36 9a       	sbi	0x06, 6	; 6

}
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <ADC_u16_result>:

u16 ADC_u16_result()
{  
	
    return ADC_result;	
 18a:	80 91 8a 00 	lds	r24, 0x008A
}
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	08 95       	ret

00000192 <ADC_u8_result>:
// in case of left adjust 
u8 ADC_u8_result()
{
	
	return ADC_result;
 192:	80 91 8a 00 	lds	r24, 0x008A
}
 196:	08 95       	ret

00000198 <main>:
#include "ADC_CFG.h" 

int main(void)
{
	u8 result;
	DDRA &=(~(1<<PA0));
 198:	d0 98       	cbi	0x1a, 0	; 26
	DDRC |=0xFF;
 19a:	84 b3       	in	r24, 0x14	; 20
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	84 bb       	out	0x14, r24	; 20
	DDRD |=0xFF;
 1a0:	91 b3       	in	r25, 0x11	; 17
 1a2:	81 bb       	out	0x11, r24	; 17
	
    while(1)
    {
		
       adc_init() ;
 1a4:	0e 94 4e 00 	call	0x9c	; 0x9c <adc_init>
	   result=  ADC_u8_result();
 1a8:	0e 94 c9 00 	call	0x192	; 0x192 <ADC_u8_result>
		 
	 
	 PORTC =(result&0xFF);
 1ac:	85 bb       	out	0x15, r24	; 21
	 PORTD =((result)>>8);
 1ae:	12 ba       	out	0x12, r1	; 18
 1b0:	f9 cf       	rjmp	.-14     	; 0x1a4 <main+0xc>

000001b2 <GPIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void GPIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	switch(PortName)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	89 f0       	breq	.+34     	; 0x1d8 <GPIO_InitPortDirection+0x26>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <GPIO_InitPortDirection+0x12>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	b9 f0       	breq	.+46     	; 0x1ec <GPIO_InitPortDirection+0x3a>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	41 f5       	brne	.+80     	; 0x212 <GPIO_InitPortDirection+0x60>
 1c2:	1e c0       	rjmp	.+60     	; 0x200 <GPIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
 1c4:	8a b3       	in	r24, 0x1a	; 26
 1c6:	94 2f       	mov	r25, r20
 1c8:	90 95       	com	r25
 1ca:	89 23       	and	r24, r25
 1cc:	8a bb       	out	0x1a, r24	; 26
 1ce:	8a b3       	in	r24, 0x1a	; 26
 1d0:	64 23       	and	r22, r20
 1d2:	68 2b       	or	r22, r24
 1d4:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 1d6:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
 1d8:	87 b3       	in	r24, 0x17	; 23
 1da:	94 2f       	mov	r25, r20
 1dc:	90 95       	com	r25
 1de:	89 23       	and	r24, r25
 1e0:	87 bb       	out	0x17, r24	; 23
 1e2:	87 b3       	in	r24, 0x17	; 23
 1e4:	64 23       	and	r22, r20
 1e6:	68 2b       	or	r22, r24
 1e8:	67 bb       	out	0x17, r22	; 23
		}
		break;
 1ea:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
 1ec:	84 b3       	in	r24, 0x14	; 20
 1ee:	94 2f       	mov	r25, r20
 1f0:	90 95       	com	r25
 1f2:	89 23       	and	r24, r25
 1f4:	84 bb       	out	0x14, r24	; 20
 1f6:	84 b3       	in	r24, 0x14	; 20
 1f8:	64 23       	and	r22, r20
 1fa:	68 2b       	or	r22, r24
 1fc:	64 bb       	out	0x14, r22	; 20
		}
		break;
 1fe:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 200:	81 b3       	in	r24, 0x11	; 17
 202:	94 2f       	mov	r25, r20
 204:	90 95       	com	r25
 206:	89 23       	and	r24, r25
 208:	81 bb       	out	0x11, r24	; 17
 20a:	81 b3       	in	r24, 0x11	; 17
 20c:	64 23       	and	r22, r20
 20e:	68 2b       	or	r22, r24
 210:	61 bb       	out	0x11, r22	; 17
 212:	08 95       	ret

00000214 <GPIO_WritePort>:
		break;
	}	
}
void GPIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	switch(PortName)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	89 f0       	breq	.+34     	; 0x23a <GPIO_WritePort+0x26>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	28 f0       	brcs	.+10     	; 0x226 <GPIO_WritePort+0x12>
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	b9 f0       	breq	.+46     	; 0x24e <GPIO_WritePort+0x3a>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	41 f5       	brne	.+80     	; 0x274 <GPIO_WritePort+0x60>
 224:	1e c0       	rjmp	.+60     	; 0x262 <GPIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 226:	8b b3       	in	r24, 0x1b	; 27
 228:	94 2f       	mov	r25, r20
 22a:	90 95       	com	r25
 22c:	89 23       	and	r24, r25
 22e:	8b bb       	out	0x1b, r24	; 27
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	64 23       	and	r22, r20
 234:	68 2b       	or	r22, r24
 236:	6b bb       	out	0x1b, r22	; 27
		}
		break;
 238:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 23a:	88 b3       	in	r24, 0x18	; 24
 23c:	94 2f       	mov	r25, r20
 23e:	90 95       	com	r25
 240:	89 23       	and	r24, r25
 242:	88 bb       	out	0x18, r24	; 24
 244:	88 b3       	in	r24, 0x18	; 24
 246:	64 23       	and	r22, r20
 248:	68 2b       	or	r22, r24
 24a:	68 bb       	out	0x18, r22	; 24
		}
		break;
 24c:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 24e:	85 b3       	in	r24, 0x15	; 21
 250:	94 2f       	mov	r25, r20
 252:	90 95       	com	r25
 254:	89 23       	and	r24, r25
 256:	85 bb       	out	0x15, r24	; 21
 258:	85 b3       	in	r24, 0x15	; 21
 25a:	64 23       	and	r22, r20
 25c:	68 2b       	or	r22, r24
 25e:	65 bb       	out	0x15, r22	; 21
		}
		break;
 260:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 262:	82 b3       	in	r24, 0x12	; 18
 264:	94 2f       	mov	r25, r20
 266:	90 95       	com	r25
 268:	89 23       	and	r24, r25
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	82 b3       	in	r24, 0x12	; 18
 26e:	64 23       	and	r22, r20
 270:	68 2b       	or	r22, r24
 272:	62 bb       	out	0x12, r22	; 18
 274:	08 95       	ret

00000276 <GPIO_ReadPort>:
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
	switch(PortName)
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	51 f0       	breq	.+20     	; 0x28e <GPIO_ReadPort+0x18>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	28 f0       	brcs	.+10     	; 0x288 <GPIO_ReadPort+0x12>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	49 f0       	breq	.+18     	; 0x294 <GPIO_ReadPort+0x1e>
 282:	83 30       	cpi	r24, 0x03	; 3
 284:	69 f4       	brne	.+26     	; 0x2a0 <GPIO_ReadPort+0x2a>
 286:	09 c0       	rjmp	.+18     	; 0x29a <GPIO_ReadPort+0x24>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMask);
 288:	89 b3       	in	r24, 0x19	; 25
 28a:	86 23       	and	r24, r22
		}
		break;
 28c:	08 95       	ret
		case PB:
		{
			Data = READ_REG(PINB,PortMask);
 28e:	86 b3       	in	r24, 0x16	; 22
 290:	86 23       	and	r24, r22
		}
		break;
 292:	08 95       	ret
		case PC:
		{
			Data = READ_REG(PINC,PortMask);
 294:	83 b3       	in	r24, 0x13	; 19
 296:	86 23       	and	r24, r22
		}
		break;
 298:	08 95       	ret
		case PD:
		{
			Data = READ_REG(PIND,PortMask);
 29a:	80 b3       	in	r24, 0x10	; 16
 29c:	86 23       	and	r24, r22
		}
		break;
 29e:	08 95       	ret
		break;
	}	
}
u8 GPIO_ReadPort(u8 PortName,u8 PortMask)
{
	u8 Data = 0;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
	}
	return Data;
	
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>

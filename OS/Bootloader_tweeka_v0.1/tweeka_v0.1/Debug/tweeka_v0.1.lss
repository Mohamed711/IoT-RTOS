
tweeka_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  0080006a  0080006a  000004b4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00000c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd7  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058e  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000195f  00000000  00000000  0000206d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000039cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  00003c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000350  00000000  00000000  00004083  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 000306fc  00000000  00000000  000043d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  00034acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	81 c1       	rjmp	.+770    	; 0x338 <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3e       	cpi	r26, 0xEC	; 236
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	ae d0       	rcall	.+348    	; 0x1e4 <main>
  88:	c4 c1       	rjmp	.+904    	; 0x412 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <DIO_WritePort>:
}

void DIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	//check the required port, specified bits and value on the Port Data Register
	switch(PortName)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_WritePort+0x26>
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	28 f0       	brcs	.+10     	; 0x9e <DIO_WritePort+0x12>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	b9 f0       	breq	.+46     	; 0xc6 <DIO_WritePort+0x3a>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	41 f5       	brne	.+80     	; 0xec <DIO_WritePort+0x60>
  9c:	1e c0       	rjmp	.+60     	; 0xda <DIO_WritePort+0x4e>
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	94 2f       	mov	r25, r20
  a2:	90 95       	com	r25
  a4:	89 23       	and	r24, r25
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	8b b3       	in	r24, 0x1b	; 27
  aa:	64 23       	and	r22, r20
  ac:	68 2b       	or	r22, r24
  ae:	6b bb       	out	0x1b, r22	; 27
		}
		break;
  b0:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	94 2f       	mov	r25, r20
  b6:	90 95       	com	r25
  b8:	89 23       	and	r24, r25
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	64 23       	and	r22, r20
  c0:	68 2b       	or	r22, r24
  c2:	68 bb       	out	0x18, r22	; 24
		}
		break;
  c4:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	94 2f       	mov	r25, r20
  ca:	90 95       	com	r25
  cc:	89 23       	and	r24, r25
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	64 23       	and	r22, r20
  d4:	68 2b       	or	r22, r24
  d6:	65 bb       	out	0x15, r22	; 21
		}
		break;
  d8:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	94 2f       	mov	r25, r20
  de:	90 95       	com	r25
  e0:	89 23       	and	r24, r25
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	64 23       	and	r22, r20
  e8:	68 2b       	or	r22, r24
  ea:	62 bb       	out	0x12, r22	; 18
  ec:	08 95       	ret

000000ee <HAL_UART_Init>:
#include "HAL_UART.h"
#include "USART.h"

void HAL_UART_Init()
{
	usart_init();
  ee:	93 c0       	rjmp	.+294    	; 0x216 <usart_init>
  f0:	08 95       	ret

000000f2 <HAL_UART_Transmit>:
}
  f2:	1a c1       	rjmp	.+564    	; 0x328 <usart_transmit>

void HAL_UART_Transmit(HAL_DataType transmit_char)
{
	usart_transmit(transmit_char);
  f4:	08 95       	ret

000000f6 <HAL_UART_Receive>:
}
  f6:	1c c1       	rjmp	.+568    	; 0x330 <usart_receive>

HAL_DataType HAL_UART_Receive()
{
	return usart_receive();
  f8:	08 95       	ret

000000fa <returnSoftwareIdentifier>:
	return 0;
}
void returnSoftwareIdentifier(void) // 'S'
{
	// Software identifier is 'AVRBOOT'
	HAL_UART_Transmit('A');
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	fa df       	rcall	.-12     	; 0xf2 <HAL_UART_Transmit>
  fe:	86 e5       	ldi	r24, 0x56	; 86
	HAL_UART_Transmit('V');
 100:	f8 df       	rcall	.-16     	; 0xf2 <HAL_UART_Transmit>
 102:	82 e5       	ldi	r24, 0x52	; 82
 104:	f6 df       	rcall	.-20     	; 0xf2 <HAL_UART_Transmit>
	HAL_UART_Transmit('R');
 106:	82 e4       	ldi	r24, 0x42	; 66
 108:	f4 df       	rcall	.-24     	; 0xf2 <HAL_UART_Transmit>
 10a:	8f e4       	ldi	r24, 0x4F	; 79
	HAL_UART_Transmit('B');
 10c:	f2 df       	rcall	.-28     	; 0xf2 <HAL_UART_Transmit>
 10e:	8f e4       	ldi	r24, 0x4F	; 79
 110:	f0 df       	rcall	.-32     	; 0xf2 <HAL_UART_Transmit>
	HAL_UART_Transmit('O');
 112:	84 e5       	ldi	r24, 0x54	; 84
 114:	ee cf       	rjmp	.-36     	; 0xf2 <HAL_UART_Transmit>

00000116 <set_address>:
 116:	cf 93       	push	r28
	HAL_UART_Transmit('O');
 118:	ee df       	rcall	.-36     	; 0xf6 <HAL_UART_Receive>
 11a:	c8 2f       	mov	r28, r24
 11c:	80 93 ea 00 	sts	0x00EA, r24
	HAL_UART_Transmit('T');
 120:	10 92 eb 00 	sts	0x00EB, r1
}
 124:	e8 df       	rcall	.-48     	; 0xf6 <HAL_UART_Receive>
void set_address()
{
	address = HAL_UART_Receive();		//read address 8 MSB
	address = (address << 8) | HAL_UART_Receive();
 126:	3c 2f       	mov	r19, r28
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	28 2b       	or	r18, r24
 12e:	39 2b       	or	r19, r25
 130:	30 93 eb 00 	sts	0x00EB, r19
 134:	20 93 ea 00 	sts	0x00EA, r18
 138:	8d e0       	ldi	r24, 0x0D	; 13
 13a:	db df       	rcall	.-74     	; 0xf2 <HAL_UART_Transmit>
	HAL_UART_Transmit('\r');
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <checkBlockSupport>:
 140:	89 e5       	ldi	r24, 0x59	; 89
}
 142:	d7 df       	rcall	.-82     	; 0xf2 <HAL_UART_Transmit>
 144:	80 e0       	ldi	r24, 0x00	; 0
void checkBlockSupport(void) // 'b'
{
	HAL_UART_Transmit('Y'); // yes, block load is supported.
	HAL_UART_Transmit((SPM_PAGESIZE>>8) & 0xFF); // send MSB first.
 146:	d5 df       	rcall	.-86     	; 0xf2 <HAL_UART_Transmit>
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	d3 cf       	rjmp	.-90     	; 0xf2 <HAL_UART_Transmit>

0000014c <AVRCommandParser>:
	HAL_UART_Transmit(SPM_PAGESIZE & 0xFF); // send LSB second.
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	c3 e0       	ldi	r28, 0x03	; 3
}
 152:	d1 e1       	ldi	r29, 0x11	; 17
{
	uint8_t cmd;

	while(1)
	{
		cmd = HAL_UART_Receive();
 154:	d0 df       	rcall	.-96     	; 0xf6 <HAL_UART_Receive>
 156:	84 35       	cpi	r24, 0x54	; 84

		switch (cmd)
 158:	e9 f3       	breq	.-6      	; 0x154 <AVRCommandParser+0x8>
 15a:	85 35       	cpi	r24, 0x55	; 85
 15c:	80 f4       	brcc	.+32     	; 0x17e <AVRCommandParser+0x32>
 15e:	8c 34       	cpi	r24, 0x4C	; 76
 160:	09 f4       	brne	.+2      	; 0x164 <AVRCommandParser+0x18>
 162:	36 c0       	rjmp	.+108    	; 0x1d0 <AVRCommandParser+0x84>
 164:	8d 34       	cpi	r24, 0x4D	; 77
 166:	30 f4       	brcc	.+12     	; 0x174 <AVRCommandParser+0x28>
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	e9 f0       	breq	.+58     	; 0x1a6 <AVRCommandParser+0x5a>
 16c:	85 34       	cpi	r24, 0x45	; 69
 16e:	09 f0       	breq	.+2      	; 0x172 <AVRCommandParser+0x26>
 170:	36 c0       	rjmp	.+108    	; 0x1de <AVRCommandParser+0x92>
 172:	2c c0       	rjmp	.+88     	; 0x1cc <AVRCommandParser+0x80>
 174:	80 35       	cpi	r24, 0x50	; 80
 176:	71 f3       	breq	.-36     	; 0x154 <AVRCommandParser+0x8>
 178:	83 35       	cpi	r24, 0x53	; 83
 17a:	89 f5       	brne	.+98     	; 0x1de <AVRCommandParser+0x92>
 17c:	2c c0       	rjmp	.+88     	; 0x1d6 <AVRCommandParser+0x8a>
 17e:	85 36       	cpi	r24, 0x65	; 101
 180:	a1 f0       	breq	.+40     	; 0x1aa <AVRCommandParser+0x5e>
 182:	86 36       	cpi	r24, 0x66	; 102
 184:	28 f4       	brcc	.+10     	; 0x190 <AVRCommandParser+0x44>
 186:	81 36       	cpi	r24, 0x61	; 97
 188:	59 f0       	breq	.+22     	; 0x1a0 <AVRCommandParser+0x54>
 18a:	82 36       	cpi	r24, 0x62	; 98
 18c:	41 f5       	brne	.+80     	; 0x1de <AVRCommandParser+0x92>
 18e:	25 c0       	rjmp	.+74     	; 0x1da <AVRCommandParser+0x8e>
 190:	80 37       	cpi	r24, 0x70	; 112
 192:	01 f3       	breq	.-64     	; 0x154 <AVRCommandParser+0x8>
 194:	80 37       	cpi	r24, 0x70	; 112
 196:	18 f1       	brcs	.+70     	; 0x1de <AVRCommandParser+0x92>
 198:	83 57       	subi	r24, 0x73	; 115
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	00 f5       	brcc	.+64     	; 0x1de <AVRCommandParser+0x92>
 19e:	da cf       	rjmp	.-76     	; 0x154 <AVRCommandParser+0x8>
 1a0:	89 e5       	ldi	r24, 0x59	; 89
			case 'P':
			//enterProgramMode();
			break;
			
			case 'a':
			HAL_UART_Transmit('Y'); // Autoincrement?
 1a2:	a7 df       	rcall	.-178    	; 0xf2 <HAL_UART_Transmit>
 1a4:	d7 cf       	rjmp	.-82     	; 0x154 <AVRCommandParser+0x8>
 1a6:	b7 df       	rcall	.-146    	; 0x116 <set_address>
			break;
 1a8:	d5 cf       	rjmp	.-86     	; 0x154 <AVRCommandParser+0x8>
			
			case 'A':
			set_address(); // write sent address
 1aa:	f8 01       	movw	r30, r16
 1ac:	c0 93 57 00 	sts	0x0057, r28

	while(1)
	{
		cmd = HAL_UART_Receive();

		switch (cmd)
 1b0:	e8 95       	spm
static inline void eraseFlash(void)
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) {
		boot_page_erase(addr);		// Perform page erase
 1b2:	07 b6       	in	r0, 0x37	; 55
 1b4:	00 fc       	sbrc	r0, 0
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <AVRCommandParser+0x66>
		boot_spm_busy_wait();		// Wait until the memory is erased.
 1b8:	e0 58       	subi	r30, 0x80	; 128
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	8b e7       	ldi	r24, 0x7B	; 123
 1be:	e0 30       	cpi	r30, 0x00	; 0
 1c0:	f8 07       	cpc	r31, r24
}
static inline void eraseFlash(void)
{
	// erase only main section (bootloader protection)
	uint32_t addr = 0;
	while (APP_END > addr) {
 1c2:	a1 f7       	brne	.-24     	; 0x1ac <AVRCommandParser+0x60>
 1c4:	d0 93 57 00 	sts	0x0057, r29
 1c8:	e8 95       	spm
		boot_page_erase(addr);		// Perform page erase
		boot_spm_busy_wait();		// Wait until the memory is erased.
		addr += SPM_PAGESIZE;
	}
	boot_rww_enable();
 1ca:	c4 cf       	rjmp	.-120    	; 0x154 <AVRCommandParser+0x8>
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	f5 d0       	rcall	.+490    	; 0x3ba <WDT_Enable>
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
			case 'e':
			eraseFlash(); //flasherase
			break;
			
			case 'E' :
			WDT_Enable(WDT_260MS); // reset
 1d2:	8f df       	rcall	.-226    	; 0xf2 <HAL_UART_Transmit>
 1d4:	bf cf       	rjmp	.-130    	; 0x154 <AVRCommandParser+0x8>
 1d6:	91 df       	rcall	.-222    	; 0xfa <returnSoftwareIdentifier>
			
			case 'L':
			HAL_UART_Transmit('\r'); //leave programming mode
 1d8:	bd cf       	rjmp	.-134    	; 0x154 <AVRCommandParser+0x8>
 1da:	b2 df       	rcall	.-156    	; 0x140 <checkBlockSupport>
 1dc:	bb cf       	rjmp	.-138    	; 0x154 <AVRCommandParser+0x8>
			break;
 1de:	8f e3       	ldi	r24, 0x3F	; 63
			
			case 't':
			//returnSupportedDeviceCodes();
			break;
			case 'S':
			returnSoftwareIdentifier();
 1e0:	88 df       	rcall	.-240    	; 0xf2 <HAL_UART_Transmit>
 1e2:	b8 cf       	rjmp	.-144    	; 0x154 <AVRCommandParser+0x8>

000001e4 <main>:
			break;
 1e4:	f8 94       	cli
			case 'p':
			//returnProgrammerType();
			break;
			case 'b':
			checkBlockSupport();
 1e6:	ef d0       	rcall	.+478    	; 0x3c6 <WDT_Disable>
 1e8:	82 df       	rcall	.-252    	; 0xee <HAL_UART_Init>
			break;
 1ea:	87 99       	sbic	0x10, 7	; 16
			// write flash or write to eeprom
			case 'g':
			//read from flash or eeprom
			
			default:
			HAL_UART_Transmit('?');
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <main+0x20>
 1ee:	83 df       	rcall	.-250    	; 0xf6 <HAL_UART_Receive>
 1f0:	8b 31       	cpi	r24, 0x1B	; 27
 1f2:	29 f4       	brne	.+10     	; 0x1fe <main+0x1a>
	if( !(BOOT_STATE_PIN & (1<<BOOT_STATE_PIN_NUMBER)) ) /* If BOOT_STATE_PIN_NUMBER is low, use bootloader. */
	{
		while(1)
		{
			// wait for esc character (0x1B) and respond with AVRBOOT
			if(HAL_UART_Receive() == 0x1B)
 1f4:	80 df       	rcall	.-256    	; 0xf6 <HAL_UART_Receive>
 1f6:	83 35       	cpi	r24, 0x53	; 83
 1f8:	e9 f7       	brne	.-6      	; 0x1f4 <main+0x10>
			{
				// wait for software identifier request
				while( HAL_UART_Receive() != 'S');
 1fa:	7f df       	rcall	.-258    	; 0xfa <returnSoftwareIdentifier>
 1fc:	a7 df       	rcall	.-178    	; 0x14c <AVRCommandParser>
 1fe:	8f e3       	ldi	r24, 0x3F	; 63
 200:	78 df       	rcall	.-272    	; 0xf2 <HAL_UART_Transmit>
				
				// answer the request
				returnSoftwareIdentifier();
 202:	f5 cf       	rjmp	.-22     	; 0x1ee <main+0xa>
 204:	e0 e0       	ldi	r30, 0x00	; 0
				
				// begin servicing the commands
				AVRCommandParser();
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	09 95       	icall
			}
			else HAL_UART_Transmit('?');
 20a:	97 98       	cbi	0x12, 7	; 18
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	d5 d0       	rcall	.+426    	; 0x3ba <WDT_Enable>
 210:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		// If BOOT_STATE_PIN_NUMBER is high, don't use bootloader.
		// So jump to the application
		jump_to_app();
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	08 95       	ret

00000216 <usart_init>:

//#define USART_BAUDRATE 115200
//#define UBRR_VALUE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void usart_init(void)
{
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
	/*Baud Rate*/
	//u16 UBRR_VALUE = ((F_CPU)/(Baud*16UL)-1);
	u16 UBRR_VALUE;
	if(usart_init_config.U2X_State != 0)
 21e:	80 91 68 00 	lds	r24, 0x0068
 222:	88 23       	and	r24, r24
 224:	61 f1       	breq	.+88     	; 0x27e <usart_init+0x68>
	{
		UBRR_VALUE = (u16)((F_CPU + usart_init_config.Baud*4UL)/(usart_init_config.Baud*8UL) - 1UL);
 226:	80 91 60 00 	lds	r24, 0x0060
 22a:	90 91 61 00 	lds	r25, 0x0061
 22e:	a0 91 62 00 	lds	r26, 0x0062
 232:	b0 91 63 00 	lds	r27, 0x0063
 236:	ac 01       	movw	r20, r24
 238:	bd 01       	movw	r22, r26
 23a:	40 58       	subi	r20, 0x80	; 128
 23c:	5b 47       	sbci	r21, 0x7B	; 123
 23e:	61 4e       	sbci	r22, 0xE1	; 225
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	6a 01       	movw	r12, r20
 244:	7b 01       	movw	r14, r22
 246:	cc 0c       	add	r12, r12
 248:	dd 1c       	adc	r13, r13
 24a:	ee 1c       	adc	r14, r14
 24c:	ff 1c       	adc	r15, r15
 24e:	cc 0c       	add	r12, r12
 250:	dd 1c       	adc	r13, r13
 252:	ee 1c       	adc	r14, r14
 254:	ff 1c       	adc	r15, r15
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	aa 1f       	adc	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	9c 01       	movw	r18, r24
 268:	ad 01       	movw	r20, r26
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	44 1f       	adc	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	ab d0       	rcall	.+342    	; 0x3ce <__udivmodsi4>
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	30 40       	sbci	r19, 0x00	; 0
 27c:	33 c0       	rjmp	.+102    	; 0x2e4 <usart_init+0xce>
 27e:	80 91 60 00 	lds	r24, 0x0060
	}
	else
	{
		UBRR_VALUE = (u16)((F_CPU + usart_init_config.Baud*8UL)/(usart_init_config.Baud*16UL) - 1UL);
 282:	90 91 61 00 	lds	r25, 0x0061
 286:	a0 91 62 00 	lds	r26, 0x0062
 28a:	b0 91 63 00 	lds	r27, 0x0063
 28e:	ac 01       	movw	r20, r24
 290:	bd 01       	movw	r22, r26
 292:	40 5c       	subi	r20, 0xC0	; 192
 294:	5d 4b       	sbci	r21, 0xBD	; 189
 296:	60 4f       	sbci	r22, 0xF0	; 240
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	6a 01       	movw	r12, r20
 29c:	7b 01       	movw	r14, r22
 29e:	cc 0c       	add	r12, r12
 2a0:	dd 1c       	adc	r13, r13
 2a2:	ee 1c       	adc	r14, r14
 2a4:	ff 1c       	adc	r15, r15
 2a6:	cc 0c       	add	r12, r12
 2a8:	dd 1c       	adc	r13, r13
 2aa:	ee 1c       	adc	r14, r14
 2ac:	ff 1c       	adc	r15, r15
 2ae:	cc 0c       	add	r12, r12
 2b0:	dd 1c       	adc	r13, r13
 2b2:	ee 1c       	adc	r14, r14
 2b4:	ff 1c       	adc	r15, r15
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	aa 1f       	adc	r26, r26
 2bc:	bb 1f       	adc	r27, r27
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	aa 1f       	adc	r26, r26
 2c4:	bb 1f       	adc	r27, r27
 2c6:	9c 01       	movw	r18, r24
 2c8:	ad 01       	movw	r20, r26
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	44 1f       	adc	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	44 1f       	adc	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	c7 01       	movw	r24, r14
 2dc:	b6 01       	movw	r22, r12
 2de:	77 d0       	rcall	.+238    	; 0x3ce <__udivmodsi4>
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	30 40       	sbci	r19, 0x00	; 0
 2e4:	10 bc       	out	0x20, r1	; 32
 2e6:	29 b9       	out	0x09, r18	; 9
	}
	
	UCSRC_REG = UBRR_SELECT;
 2e8:	30 bd       	out	0x20, r19	; 32
	UBRRL_REG = UBRR_VALUE;	
 2ea:	61 d0       	rcall	.+194    	; 0x3ae <uart_enable>
	UBRRH_REG = UBRR_VALUE >> 8;
 2ec:	80 e8       	ldi	r24, 0x80	; 128
	
	uart_enable();
 2ee:	80 bd       	out	0x20, r24	; 32
 2f0:	90 b5       	in	r25, 0x20	; 32
	
	UCSRC_REG = UCSRC_SELECT;
 2f2:	80 91 64 00 	lds	r24, 0x0064
	UCSRC_REG |= usart_init_config.DataBits | usart_init_config.StopBits | usart_init_config.Parity;
 2f6:	89 2b       	or	r24, r25
 2f8:	90 91 65 00 	lds	r25, 0x0065
 2fc:	89 2b       	or	r24, r25
 2fe:	90 91 66 00 	lds	r25, 0x0066
 302:	89 2b       	or	r24, r25
 304:	80 bd       	out	0x20, r24	; 32
 306:	9b b1       	in	r25, 0x0b	; 11
 308:	80 91 68 00 	lds	r24, 0x0068
	
	UCSRA_REG |= usart_init_config.U2X_State;
 30c:	89 2b       	or	r24, r25
 30e:	8b b9       	out	0x0b, r24	; 11
 310:	80 91 67 00 	lds	r24, 0x0067
 314:	88 23       	and	r24, r24
	
	if(usart_init_config.EnableInterrupt)
 316:	19 f0       	breq	.+6      	; 0x31e <usart_init+0x108>
 318:	f8 94       	cli
 31a:	4d d0       	rcall	.+154    	; 0x3b6 <uart_enable_interrupt_rx>
 31c:	78 94       	sei
	{
		cli();
 31e:	ff 90       	pop	r15
		uart_enable_interrupt_rx();
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
		sei();
 324:	cf 90       	pop	r12
	}		
}
 326:	08 95       	ret

00000328 <usart_transmit>:
 328:	5d 9b       	sbis	0x0b, 5	; 11
 32a:	fe cf       	rjmp	.-4      	; 0x328 <usart_transmit>
 32c:	8c b9       	out	0x0c, r24	; 12
 32e:	08 95       	ret

00000330 <usart_receive>:
	UDR_REG = x;	//put data into the buffer
}

unsigned char usart_receive(void)
{
	while (!(UCSRA_REG & RXC_RECEIVE_COMPLETE));
 330:	5f 9b       	sbis	0x0b, 7	; 11
 332:	fe cf       	rjmp	.-4      	; 0x330 <usart_receive>
	return UDR;
 334:	8c b1       	in	r24, 0x0c	; 12
}
 336:	08 95       	ret

00000338 <__vector_13>:

 ISR(USART_RXC_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	0f 92       	push	r0
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char value;
	value = UDR_REG;
 364:	8c b1       	in	r24, 0x0c	; 12
 366:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePort(PC, value, 0xFF);
 368:	69 81       	ldd	r22, Y+1	; 0x01
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	4f ef       	ldi	r20, 0xFF	; 255
 36e:	8e de       	rcall	.-740    	; 0x8c <DIO_WritePort>
 370:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	90 e7       	ldi	r25, 0x70	; 112
 374:	a2 e0       	ldi	r26, 0x02	; 2
 376:	81 50       	subi	r24, 0x01	; 1
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	a0 40       	sbci	r26, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <__vector_13+0x3e>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <__vector_13+0x48>
 380:	00 00       	nop
 382:	89 81       	ldd	r24, Y+1	; 0x01
	_delay_ms(100);
	usart_transmit(value);
 384:	d1 df       	rcall	.-94     	; 0x328 <usart_transmit>
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
}
 38a:	cf 91       	pop	r28
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <uart_enable>:
/*********************************/

void uart_enable()
{
	/*enable UART receiver and transmitter*/
	UCSRB_REG |= (1<<RXEN) | (1<<TXEN);	
 3ae:	8a b1       	in	r24, 0x0a	; 10
 3b0:	88 61       	ori	r24, 0x18	; 24
 3b2:	8a b9       	out	0x0a, r24	; 10
}
 3b4:	08 95       	ret

000003b6 <uart_enable_interrupt_rx>:
	UCSRB_REG |= (1<<RXCIE) | (1<<TXCIE) | (1<<UDRIE);
}

void uart_enable_interrupt_rx()
{
	UCSRB_REG |= (1<<RXCIE);
 3b6:	57 9a       	sbi	0x0a, 7	; 10
}
 3b8:	08 95       	ret

000003ba <WDT_Enable>:

void WDT_Enable(u8 Timeout)
{
	//DIO_InitPortDirection(PC,0xF0,0xF0);
	//DIO_WritePort(PC, 0xF0,0xF0);
	WDTCR_Reg =	0x00;
 3ba:	11 bc       	out	0x21, r1	; 33
	WDTCR_Reg |= Timeout;
 3bc:	91 b5       	in	r25, 0x21	; 33
 3be:	89 2b       	or	r24, r25
 3c0:	81 bd       	out	0x21, r24	; 33
	WDTCR_Reg = ( 1 << WDT_En);
 3c2:	11 bc       	out	0x21, r1	; 33
	
}
 3c4:	08 95       	ret

000003c6 <WDT_Disable>:


void WDT_Disable()
{
	WDR();
 3c6:	a8 95       	wdr
	WDTCR_Reg = ( 1 << WDT_En) | ( 1 << WDT_TurnOFF_Enable) ;
 3c8:	11 bc       	out	0x21, r1	; 33
	WDTCR_Reg = 0x00;
 3ca:	11 bc       	out	0x21, r1	; 33
 3cc:	08 95       	ret

000003ce <__udivmodsi4>:
 3ce:	a1 e2       	ldi	r26, 0x21	; 33
 3d0:	1a 2e       	mov	r1, r26
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	fd 01       	movw	r30, r26
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <__udivmodsi4_ep>

000003da <__udivmodsi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	ee 1f       	adc	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	a2 17       	cp	r26, r18
 3e4:	b3 07       	cpc	r27, r19
 3e6:	e4 07       	cpc	r30, r20
 3e8:	f5 07       	cpc	r31, r21
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__udivmodsi4_ep>
 3ec:	a2 1b       	sub	r26, r18
 3ee:	b3 0b       	sbc	r27, r19
 3f0:	e4 0b       	sbc	r30, r20
 3f2:	f5 0b       	sbc	r31, r21

000003f4 <__udivmodsi4_ep>:
 3f4:	66 1f       	adc	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	1a 94       	dec	r1
 3fe:	69 f7       	brne	.-38     	; 0x3da <__udivmodsi4_loop>
 400:	60 95       	com	r22
 402:	70 95       	com	r23
 404:	80 95       	com	r24
 406:	90 95       	com	r25
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
 40c:	bd 01       	movw	r22, r26
 40e:	cf 01       	movw	r24, r30
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>

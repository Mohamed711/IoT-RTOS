
atmegaHAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000366  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080008a  0080008a  00000424  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000390  00000000  00000000  00000b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001901  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000baf  00000000  00000000  00002809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000306d  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000628  00000000  00000000  00006428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087b  00000000  00000000  00006a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c35  00000000  00000000  000072cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 00053710  00000000  00000000  00007f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000240  00000000  00000000  0005b610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	f1 c0       	rjmp	.+482    	; 0x20c <__vector_10>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	d9 c0       	rjmp	.+434    	; 0x1e4 <__vector_12>
  32:	00 00       	nop
  34:	3c c1       	rjmp	.+632    	; 0x2ae <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	25 c0       	rjmp	.+74     	; 0x8c <__vector_16>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	4a d1       	rcall	.+660    	; 0x31c <main>
  88:	6c c1       	rjmp	.+728    	; 0x362 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <__vector_16>:
		if(adc_clk[u8LoopCount].u32TempFreq < u32MaxFreq )
		{
			break;
		}
	}
	ADCSRA &=0xF8; 
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
	ADCSRA |=(adc_clk[u8LoopCount].u8RegVal & 0x03);
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	2f 93       	push	r18
  98:	3f 93       	push	r19
  9a:	4f 93       	push	r20
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	90 93 8b 00 	sts	0x008B, r25
  a8:	80 93 8a 00 	sts	0x008A, r24
  ac:	45 b1       	in	r20, 0x05	; 5
  ae:	20 91 8a 00 	lds	r18, 0x008A
	#if ADC_JUSTIFY == 'L'
	/* Left adjust ADC result to allow easy 8 bit reading */
	ADMUX |= (1 << ADLAR); 
	#elif ADC_JUSTIFY == 'R'
    /*Right adjust */
	ADMUX |= (0 << ADLAR); 
  b2:	30 91 8b 00 	lds	r19, 0x008B
	#endif
	/* 4) Enable ADC Interrupt */
	if( enable_interrupt == 1)
  b6:	94 2f       	mov	r25, r20
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	82 2b       	or	r24, r18
  bc:	93 2b       	or	r25, r19
	{	
	ADCSRA |= (1 << ADIE);
  be:	90 93 8b 00 	sts	0x008B, r25
	/* 6) set global interrupt */
	sei();
	}	
	/* enable */ 
	if(trigger != Free_Running_mode )
  c2:	80 93 8a 00 	sts	0x008A, r24
	{	
	ADCSRA |=(1<<ADATE);
	}	
	/* 8)set channel */
	ADMUX |=((channel)&0x1F);
  c6:	36 9a       	sbi	0x06, 6	; 6
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	4f 91       	pop	r20
	/* 5) Enable ADC */
	ADCSRA |= (1 << ADEN);
  ce:	3f 91       	pop	r19
	
	if( enable_interrupt == 1)	
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
	{	
	/* 7) Start conversions single conversion */
	ADCSRA |= (1 << ADSC);
  d6:	0f 90       	pop	r0
	}	
	/* set trigger */
	SFIOR |= ((trigger)&07)<<5;
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <DIO_InitPortDirection>:
#define WRITE_REG(Reg,Value,Mask) Reg&=~(Mask); Reg|=(Value & Mask)
#define READ_REG(Reg,Mask) Reg & Mask

void DIO_InitPortDirection(uint8_t PortName,uint8_t PortDirection,uint8_t PortMask)
{
	switch(PortName)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	89 f0       	breq	.+34     	; 0x102 <DIO_InitPortDirection+0x26>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_InitPortDirection+0x12>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	b9 f0       	breq	.+46     	; 0x116 <DIO_InitPortDirection+0x3a>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	41 f5       	brne	.+80     	; 0x13c <DIO_InitPortDirection+0x60>
  ec:	1e c0       	rjmp	.+60     	; 0x12a <DIO_InitPortDirection+0x4e>
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	94 2f       	mov	r25, r20
  f2:	90 95       	com	r25
  f4:	89 23       	and	r24, r25
  f6:	8a bb       	out	0x1a, r24	; 26
  f8:	8a b3       	in	r24, 0x1a	; 26
  fa:	64 23       	and	r22, r20
  fc:	68 2b       	or	r22, r24
  fe:	6a bb       	out	0x1a, r22	; 26
		}
		break;
 100:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
 102:	87 b3       	in	r24, 0x17	; 23
 104:	94 2f       	mov	r25, r20
 106:	90 95       	com	r25
 108:	89 23       	and	r24, r25
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	87 b3       	in	r24, 0x17	; 23
 10e:	64 23       	and	r22, r20
 110:	68 2b       	or	r22, r24
 112:	67 bb       	out	0x17, r22	; 23
		}
		break;
 114:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
 116:	84 b3       	in	r24, 0x14	; 20
 118:	94 2f       	mov	r25, r20
 11a:	90 95       	com	r25
 11c:	89 23       	and	r24, r25
 11e:	84 bb       	out	0x14, r24	; 20
 120:	84 b3       	in	r24, 0x14	; 20
 122:	64 23       	and	r22, r20
 124:	68 2b       	or	r22, r24
 126:	64 bb       	out	0x14, r22	; 20
		}
		break;
 128:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 12a:	81 b3       	in	r24, 0x11	; 17
 12c:	94 2f       	mov	r25, r20
 12e:	90 95       	com	r25
 130:	89 23       	and	r24, r25
 132:	81 bb       	out	0x11, r24	; 17
 134:	81 b3       	in	r24, 0x11	; 17
 136:	64 23       	and	r22, r20
 138:	68 2b       	or	r22, r24
 13a:	61 bb       	out	0x11, r22	; 17
 13c:	08 95       	ret

0000013e <HAL_SPI_Receive>:
	spiMasterTransmit(SPIDATA->Txdata);
}

uint8_t HAL_SPI_Receive(SPI_HandleTypeDef * SPIDATA)
{
	return spiTranceiver(SPIDATA->Txdata);
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	5f c0       	rjmp	.+190    	; 0x202 <spiTranceiver>

00000144 <spiInitMaster>:

static volatile uint8_t u8LoopCount;
 volatile uint8_t SPI_DATA;
 
void spiInitMaster(uint32_t u32MaxFreq, uint8_t u8Mode, uint8_t u8DataOrder)
{
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	6b 01       	movw	r12, r22
 152:	7c 01       	movw	r14, r24
 154:	c4 2f       	mov	r28, r20
 156:	d2 2f       	mov	r29, r18
	uint8_t u8LoopCount;
	
		DIO_InitPortDirection(PB,0xB0,0xF0);// MOSI,MISO,SCK,SS Port direction
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	60 eb       	ldi	r22, 0xB0	; 176
 15c:	40 ef       	ldi	r20, 0xF0	; 240
 15e:	be df       	rcall	.-132    	; 0xdc <DIO_InitPortDirection>
 160:	80 91 66 00 	lds	r24, 0x0066

	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
	{
		if(spi_clk[u8LoopCount].u32TempFreq <= u32MaxFreq)
 164:	90 91 67 00 	lds	r25, 0x0067
 168:	a0 91 68 00 	lds	r26, 0x0068
 16c:	b0 91 69 00 	lds	r27, 0x0069
 170:	c8 16       	cp	r12, r24
 172:	d9 06       	cpc	r13, r25
 174:	ea 06       	cpc	r14, r26
 176:	fb 06       	cpc	r15, r27
 178:	88 f4       	brcc	.+34     	; 0x19c <spiInitMaster+0x58>
 17a:	eb e6       	ldi	r30, 0x6B	; 107
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	21 e0       	ldi	r18, 0x01	; 1
	uint8_t u8LoopCount;
	
		DIO_InitPortDirection(PB,0xB0,0xF0);// MOSI,MISO,SCK,SS Port direction

	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 180:	80 81       	ld	r24, Z
	{
		if(spi_clk[u8LoopCount].u32TempFreq <= u32MaxFreq)
 182:	91 81       	ldd	r25, Z+1	; 0x01
 184:	a2 81       	ldd	r26, Z+2	; 0x02
 186:	b3 81       	ldd	r27, Z+3	; 0x03
 188:	c8 16       	cp	r12, r24
 18a:	d9 06       	cpc	r13, r25
 18c:	ea 06       	cpc	r14, r26
 18e:	fb 06       	cpc	r15, r27
 190:	30 f4       	brcc	.+12     	; 0x19e <spiInitMaster+0x5a>
 192:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t u8LoopCount;
	
		DIO_InitPortDirection(PB,0xB0,0xF0);// MOSI,MISO,SCK,SS Port direction

	/*Get the most suitable pre-scalar */
	for(u8LoopCount = 0; u8LoopCount < PRESCALAR_NUM ;u8LoopCount++)
 194:	35 96       	adiw	r30, 0x05	; 5
 196:	27 30       	cpi	r18, 0x07	; 7
 198:	99 f7       	brne	.-26     	; 0x180 <spiInitMaster+0x3c>
 19a:	01 c0       	rjmp	.+2      	; 0x19e <spiInitMaster+0x5a>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	1d b8       	out	0x0d, r1	; 13
		{
			break;
		}
	}
	
	SPCR_REG = 0X00;
 1a0:	3d b1       	in	r19, 0x0d	; 13
	SPCR_REG |=  SPI_EN | u8DataOrder |Master_Or_Slave| u8Mode|(spi_clk[u8LoopCount].u8RegVal & 0x03);
 1a2:	82 2f       	mov	r24, r18
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc 01       	movw	r30, r24
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	8e 0f       	add	r24, r30
 1b2:	9f 1f       	adc	r25, r31
 1b4:	fc 01       	movw	r30, r24
 1b6:	ea 59       	subi	r30, 0x9A	; 154
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	84 81       	ldd	r24, Z+4	; 0x04
 1bc:	98 2f       	mov	r25, r24
 1be:	93 70       	andi	r25, 0x03	; 3
 1c0:	93 2b       	or	r25, r19
 1c2:	c0 64       	ori	r28, 0x40	; 64
 1c4:	dc 2b       	or	r29, r28
 1c6:	d9 2b       	or	r29, r25
 1c8:	dd b9       	out	0x0d, r29	; 13
 1ca:	1e b8       	out	0x0e, r1	; 14
	SPSR_REG = 0x00;
 1cc:	9e b1       	in	r25, 0x0e	; 14
	SPSR_REG |= (spi_clk[u8LoopCount].u8RegVal >> 2);
 1ce:	86 95       	lsr	r24
 1d0:	86 95       	lsr	r24
 1d2:	89 2b       	or	r24, r25
 1d4:	8e b9       	out	0x0e, r24	; 14
 1d6:	df 91       	pop	r29
	
}
 1d8:	cf 91       	pop	r28
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	08 95       	ret

000001e4 <__vector_12>:
 1e4:	1f 92       	push	r1
	SPDR_REG=data;
	while(!(SPSR_REG & SPIF_0));
}

ISR (SPI_STC_vect)//receive for slave 
{
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
	SPI_DATA=SPDR_REG;
 1f0:	8f b1       	in	r24, 0x0f	; 15
 1f2:	80 93 94 00 	sts	0x0094, r24
}
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <spiTranceiver>:


uint8_t spiTranceiver(uint8_t data)
{
	SPDR_REG =data;
 202:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR_REG & SPIF_0));
 204:	77 9b       	sbis	0x0e, 7	; 14
 206:	fe cf       	rjmp	.-4      	; 0x204 <spiTranceiver+0x2>
	return SPDR_REG;
 208:	8f b1       	in	r24, 0x0f	; 15
 20a:	08 95       	ret

0000020c <__vector_10>:
*	number of milli-seconds required. When the 'count' matches the 'countCompare' the required
*	function is executed. 
*
**************************************************************************************************/
ISR(TIMER0_COMP_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	count++;
 22e:	80 91 90 00 	lds	r24, 0x0090
 232:	90 91 91 00 	lds	r25, 0x0091
 236:	a0 91 92 00 	lds	r26, 0x0092
 23a:	b0 91 93 00 	lds	r27, 0x0093
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	a1 1d       	adc	r26, r1
 242:	b1 1d       	adc	r27, r1
 244:	80 93 90 00 	sts	0x0090, r24
 248:	90 93 91 00 	sts	0x0091, r25
 24c:	a0 93 92 00 	sts	0x0092, r26
 250:	b0 93 93 00 	sts	0x0093, r27
	if (count == countCompare)
 254:	40 91 8c 00 	lds	r20, 0x008C
 258:	50 91 8d 00 	lds	r21, 0x008D
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	84 17       	cp	r24, r20
 262:	95 07       	cpc	r25, r21
 264:	a6 07       	cpc	r26, r22
 266:	b7 07       	cpc	r27, r23
 268:	69 f4       	brne	.+26     	; 0x284 <__vector_10+0x78>
	{
		TMR_CylicFunPtr();
 26a:	e0 91 8e 00 	lds	r30, 0x008E
 26e:	f0 91 8f 00 	lds	r31, 0x008F
 272:	09 95       	icall
		count = 0;
 274:	10 92 90 00 	sts	0x0090, r1
 278:	10 92 91 00 	sts	0x0091, r1
 27c:	10 92 92 00 	sts	0x0092, r1
 280:	10 92 93 00 	sts	0x0093, r1
	}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <uartSend>:
*
*	\return	none                                                          
************************************************************************/
void uartSend(unsigned char x)
{
	while (!(UCSRA_REG & UDR_ENABLE));	/*wait until the transmit buffer is empty and ready to be written*/
 2a6:	5d 9b       	sbis	0x0b, 5	; 11
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <uartSend>
	UDR_REG = x;	/*put data into the buffer*/
 2aa:	8c b9       	out	0x0c, r24	; 12
}
 2ac:	08 95       	ret

000002ae <__vector_13>:
/************************************************************************
*	if interrupt happens (byte is received), write data in UDR_REG on port C, delay 0.1 sec,
*	then send the same data again
************************************************************************/
 ISR(USART_RXC_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	0f 92       	push	r0
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char value;
	value = UDR_REG;
 2da:	8c b1       	in	r24, 0x0c	; 12
 2dc:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	90 e7       	ldi	r25, 0x70	; 112
 2e2:	a2 e0       	ldi	r26, 0x02	; 2
 2e4:	81 50       	subi	r24, 0x01	; 1
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	a0 40       	sbci	r26, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <__vector_13+0x36>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <__vector_13+0x40>
 2ee:	00 00       	nop
	_delay_ms(100);
	uartSend(value);	/*just echo the data received*/
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	d9 df       	rcall	.-78     	; 0x2a6 <uartSend>
 2f4:	0f 90       	pop	r0
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <main>:
	u8MODE_1,
	u8DOR_MSB
};

void main()
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	00 d0       	rcall	.+0      	; 0x322 <main+0x6>
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
	DIO_InitPortDirection(PA,0xFF,0xFF);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	6f ef       	ldi	r22, 0xFF	; 255
 32a:	4f ef       	ldi	r20, 0xFF	; 255
 32c:	d7 de       	rcall	.-594    	; 0xdc <DIO_InitPortDirection>
 32e:	60 91 60 00 	lds	r22, 0x0060
	SPI_HandleTypeDef SPIDATA ;
	spimasterinit(&spi);
 332:	70 91 61 00 	lds	r23, 0x0061
 336:	80 91 62 00 	lds	r24, 0x0062
 33a:	90 91 63 00 	lds	r25, 0x0063
 33e:	40 91 64 00 	lds	r20, 0x0064
 342:	20 91 65 00 	lds	r18, 0x0065
 346:	fe de       	rcall	.-516    	; 0x144 <spiInitMaster>
 348:	07 e0       	ldi	r16, 0x07	; 7
 34a:	10 e1       	ldi	r17, 0x10	; 16
while(1)
	{
		//SPIDATA.Txdata=8;
		PORTA=HAL_SPI_Receive(&SPIDATA);
		SPIDATA.Txdata=7;
 34c:	ce 01       	movw	r24, r28
		PORTA=HAL_SPI_Receive(&SPIDATA);
		
		SPIDATA.Txdata=16;
 34e:	01 96       	adiw	r24, 0x01	; 1
	SPI_HandleTypeDef SPIDATA ;
	spimasterinit(&spi);
while(1)
	{
		//SPIDATA.Txdata=8;
		PORTA=HAL_SPI_Receive(&SPIDATA);
 350:	f6 de       	rcall	.-532    	; 0x13e <HAL_SPI_Receive>
 352:	8b bb       	out	0x1b, r24	; 27
 354:	09 83       	std	Y+1, r16	; 0x01
 356:	ce 01       	movw	r24, r28
 358:	01 96       	adiw	r24, 0x01	; 1
		SPIDATA.Txdata=7;
 35a:	f1 de       	rcall	.-542    	; 0x13e <HAL_SPI_Receive>
		PORTA=HAL_SPI_Receive(&SPIDATA);
 35c:	8b bb       	out	0x1b, r24	; 27
 35e:	19 83       	std	Y+1, r17	; 0x01
 360:	f5 cf       	rjmp	.-22     	; 0x34c <main+0x30>

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
